{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.join.js","webpack:///./src/components/geoserver/wfs/QueryWFS.vue","webpack:///src/components/geoserver/wfs/QueryWFS.vue","webpack:///./src/components/geoserver/wfs/QueryWFS.vue?1663","webpack:///./src/components/geoserver/wfs/QueryWFS.vue?2618"],"names":["$","uncurryThis","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","join","ES3_STRINGS","Object","STRICT_METHOD","target","proto","forced","separator","this","undefined","render","_vm","_c","_self","attrs","path","_v","staticRenderFns","data","geoserverData","wsName","uri","wfsURL","layer","wfsFilter","created","mounted","methods","initMap","format","url","that","extent","strategy","title","source","style","image","radius","fill","color","opacity","getTdtLayer","layers","view","projection","center","zoom","findData","srcName","featureNS","featurePrefix","featureTypes","outputFormat","filter","fetch","method","body","console","geometryName","component"],"mappings":"gHACA,IAAIA,EAAI,EAAQ,QACZC,EAAc,EAAQ,QACtBC,EAAgB,EAAQ,QACxBC,EAAkB,EAAQ,QAC1BC,EAAsB,EAAQ,QAE9BC,EAAaJ,EAAY,GAAGK,MAE5BC,EAAcL,GAAiBM,OAC/BC,EAAgBL,EAAoB,OAAQ,KAIhDJ,EAAE,CAAEU,OAAQ,QAASC,OAAO,EAAMC,OAAQL,IAAgBE,GAAiB,CACzEH,KAAM,SAAcO,GAClB,OAAOR,EAAWF,EAAgBW,WAAqBC,IAAdF,EAA0B,IAAMA,O,yCChB7E,IAAIG,EAAS,WAAkB,IAAIC,EAAIH,KAAKI,EAAGD,EAAIE,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACA,EAAG,gBAAgB,CAACE,MAAM,CAAC,kBAAkB,wBAAwB,CAACF,EAAG,qBAAqB,CAACE,MAAM,CAAC,GAAK,CAAEC,KAAM,WAAY,CAACJ,EAAIK,GAAG,QAAQJ,EAAG,qBAAqB,CAACD,EAAIK,GAAG,eAAeJ,EAAG,qBAAqB,CAACD,EAAIK,GAAG,SAASJ,EAAG,qBAAqB,CAACD,EAAIK,GAAG,cAAc,GAAGJ,EAAG,UAAU,CAACA,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,YAAY,IAEjZG,EAAkB,G,gLC0BP,GACfC,gBACA,OAEAC,eACAC,oBACAC,0CACAC,mDACAC,cAEAC,iBAGAC,qBAEAC,mBACA,gBAEAC,SACAC,mBACA,WAEA,cACAC,kBACAC,gBACA,OACAC,gFACAA,2BACAA,sBAFAA,yDAGAC,0BAEAC,uBAGA,cACAC,gBACAC,SACAC,kBACAC,kBACAC,SACAC,iBACAC,gBACAC,mBAMA,cACAN,kBACAC,kBACAC,kBACAC,SACAC,iBACAC,gBACAC,mBAMA,GACAC,wBACAA,6BAGA,YACAtC,aACAuC,SACAC,iBACAC,uBACAC,+BACAC,WAGA,iBACA,iBAGAC,oBACA,WACA,GACAC,oBACAC,iCACAC,wCACAC,wCACAC,gCAEAC,kBACAA,6BACAA,+BAGA,kCACAC,8BACAC,cACAC,gDACA,kBACA,mBACA,kBACAC,yCACA,kBACAC,sBACA,gBACA,aACA5B,6CCrIgX,I,YCO5W6B,EAAY,eACd,EACAlD,EACAO,GACA,EACA,KACA,WACA,MAIa,aAAA2C,E","file":"js/chunk-42aa1406.3783f650.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = uncurryThis([].join);\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('el-breadcrumb',{attrs:{\"separator-class\":\"el-icon-arrow-right\"}},[_c('el-breadcrumb-item',{attrs:{\"to\":{ path: '/home' }}},[_vm._v(\"首页\")]),_c('el-breadcrumb-item',[_vm._v(\"GeoServer\")]),_c('el-breadcrumb-item',[_vm._v(\"WFS\")]),_c('el-breadcrumb-item',[_vm._v(\"WFS查询数据\")])],1),_c('el-card',[_c('div',{attrs:{\"id\":\"map\"}})])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <!--面包屑导航区域-->\r\n        <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n            <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n            <el-breadcrumb-item>GeoServer</el-breadcrumb-item>\r\n            <el-breadcrumb-item>WFS</el-breadcrumb-item>\r\n            <el-breadcrumb-item>WFS查询数据</el-breadcrumb-item>\r\n        </el-breadcrumb>\r\n        <!--卡片区域-->\r\n        <el-card>\r\n            <div id=\"map\"></div>\r\n        </el-card>\r\n    </div>\r\n</template>\r\n<script>\r\nimport Map from 'ol/map';\r\nimport View from 'ol/view';\r\nimport VectorLayer from 'ol/layer/vector';\r\nimport Vector from 'ol/source/vector';\r\nimport GeoJSON from 'ol/format/geojson';\r\nimport WFS from 'ol/format/wfs';\r\nimport filter from 'ol/format/filter';\r\nimport Style from 'ol/style/style';\r\nimport Circle from 'ol/style/circle';\r\nimport Fill from 'ol/style/fill';\r\nimport loadingstrategy from 'ol/loadingstrategy';\r\nimport {getTdtLayer} from \"../../../utils/searchUtils\";\r\nexport default {\r\n    data() {\r\n        return {\r\n            // 服务配置，命名空间、图层、服务地址等\r\n            geoserverData: {\r\n                wsName: 'webgistest',\r\n                uri: 'http://www.openplans.org/webgistest',\r\n                wfsURL: process.env.VUE_APP_GEOSERVER + 'geoserver/wfs?',\r\n                layer: 'port'\r\n            },\r\n            wfsFilter: null\r\n        }\r\n    },\r\n    created() {\r\n    },\r\n    mounted() {\r\n        this.initMap()\r\n    },\r\n    methods: {\r\n        initMap() {\r\n            const that = this\r\n            //测试数据 添加WFS数据  添加所有\r\n            let wfsSource = new Vector({\r\n                format: new GeoJSON(),\r\n                url: function (extent) {\r\n                    return (\r\n                        that.geoserverData.wfsURL + 'service=WFS&version=1.1.0&request=GetFeature&typeName=' +\r\n                        that.geoserverData.wsName + \":\" +\r\n                        that.geoserverData.layer + '&' + 'outputFormat=application/json&srsname=EPSG:3857&bbox=' +\r\n                        extent.join(',') + ',EPSG:3857');\r\n                },\r\n                strategy: loadingstrategy.bbox\r\n            });\r\n\r\n            let wfsLayer = new VectorLayer({\r\n                title: 'add WFS',\r\n                source: wfsSource,\r\n                style: new Style({\r\n                    image: new Circle({\r\n                        radius: 5,\r\n                        fill: new Fill({\r\n                            color: \"#389BCD\",\r\n                            opacity: 0.5,\r\n                        }),\r\n                    }),\r\n                })\r\n            })\r\n\r\n            let wfsFilter = new VectorLayer({\r\n                source: new Vector(),\r\n                style: new Style({\r\n                    image: new Circle({\r\n                        radius: 5,\r\n                        fill: new Fill({\r\n                            color: \"#d90000\",\r\n                            opacity: 0.5,\r\n                        }),\r\n                    }),\r\n                })\r\n            });\r\n\r\n            let layers = [\r\n              getTdtLayer(\"vec_w\"),\r\n              getTdtLayer(\"cva_w\"), wfsLayer, wfsFilter\r\n            ];\r\n\r\n            let map = new Map({\r\n                target: 'map',\r\n                layers: layers,\r\n                view: new View({\r\n                    projection: \"EPSG:3857\",\r\n                    center: [12233037.3, 4861921.87],\r\n                    zoom: 4\r\n                })\r\n            });\r\n            this.wfsFilter = wfsFilter\r\n            this.findData()\r\n        },\r\n        // 查询过滤图层\r\n        findData() {\r\n            const that = this\r\n            let data = {\r\n                srcName: 'EPSG:4326',\r\n                featureNS: this.geoserverData.uri,\r\n                featurePrefix: this.geoserverData.wsName,\r\n                featureTypes: [this.geoserverData.layer],\r\n                outputFormat: 'application/json',\r\n                // 查询方式就和写 SQL 一样\r\n                filter: filter.and(\r\n                    filter.like('porttype', '沿海'),\r\n                    filter.equalTo('name', '珠海港')\r\n                )\r\n            }\r\n            let request = new WFS().writeGetFeature(data)\r\n            fetch(that.geoserverData.wfsURL, {\r\n                method: 'POST',\r\n                body: new XMLSerializer().serializeToString(request),\r\n            }).then(function (response) {\r\n                return response.json()\r\n            }).then(function (json) {\r\n                console.log(JSON.stringify(json, null, \"\\t\"))\r\n                let features = new GeoJSON({\r\n                    geometryName: 'geom',\r\n                }).readFeatures(json)\r\n                if (that.wfsFilter) {\r\n                    that.wfsFilter.getSource().addFeatures(features)\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n\r\n</style>\r\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./QueryWFS.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./QueryWFS.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./QueryWFS.vue?vue&type=template&id=7d7e344a&scoped=true&\"\nimport script from \"./QueryWFS.vue?vue&type=script&lang=js&\"\nexport * from \"./QueryWFS.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7d7e344a\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}