{"version":3,"sources":["webpack:///./node_modules/ol/source/xyz.js","webpack:///./node_modules/ol/tile.js","webpack:///./node_modules/ol/imagetile.js","webpack:///./node_modules/ol/tilecache.js","webpack:///./node_modules/ol/reproj/tile.js","webpack:///./node_modules/ol/source/tile.js","webpack:///./node_modules/ol/source/tileeventtype.js","webpack:///./node_modules/ol/source/urltile.js","webpack:///./node_modules/ol/source/tileimage.js","webpack:///./node_modules/ol/layer/tileproperty.js","webpack:///./node_modules/ol/layer/tile.js","webpack:///./node_modules/ol/tileurlfunction.js"],"names":["_ol_source_XYZ_","opt_options","options","projection","undefined","tileGrid","createXYZ","extent","extentFromProjection","maxZoom","minZoom","tileSize","call","this","attributions","cacheSize","crossOrigin","logo","opaque","reprojectionErrorThreshold","tileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","inherits","_ol_Tile_","tileCoord","state","interimTile","key","transition_","transitionStarts_","prototype","changed","dispatchEvent","CHANGE","getKey","getInterimTile","tile","getState","LOADED","refreshInterimChain","prev","LOADING","IDLE","getTileCoord","setState","load","getAlpha","id","time","start","delta","easeIn","inTransition","endTransition","_ol_ImageTile_","src","crossOrigin_","src_","image_","Image","imageListenerKeys_","tileLoadFunction_","disposeInternal","unlistenImage_","getBlankImage","dispose","ABORT","getImage","handleImageError_","ERROR","handleImageLoad_","naturalWidth","naturalHeight","EMPTY","listenOnce","LOAD","forEach","unlistenByKey","ctx","createCanvasContext2D","fillStyle","fillRect","canvas","_ol_TileCache_","opt_highWaterMark","expireCache","usedTiles","zKey","canExpireCache","peekLast","toString","contains","pop","pruneExceptNewestZ","getCount","peekFirstKey","fromKey","z","remove","_ol_reproj_Tile_","sourceProj","sourceTileGrid","targetProj","targetTileGrid","wrappedTileCoord","pixelRatio","gutter","getTileFunction","opt_errorThreshold","opt_renderEdges","renderEdges_","pixelRatio_","gutter_","canvas_","sourceTileGrid_","targetTileGrid_","wrappedTileCoord_","sourceTiles_","sourcesListenerKeys_","sourceZ_","targetExtent","getTileCoordExtent","maxTargetExtent","getExtent","maxSourceExtent","limitedTargetExtent","getIntersection","getArea","sourceProjExtent","targetResolution","getResolution","targetCenter","getCenter","sourceResolution","calculateSourceResolution","isFinite","errorThresholdInPixels","DEFAULT_RASTER_REPROJECTION_ERROR_THRESHOLD","triangulation_","getTriangles","length","getZForResolution","sourceExtent","calculateSourceExtent","canWrapX","clamp","sourceRange","getTileRangeForExtentAndZ","srcX","minX","maxX","srcY","minY","maxY","push","unlistenSources_","reproject_","sources","i","arr","image","size","getTileSize","width","height","render","leftToLoad","sourceListenKey","listen","e","setTimeout","bind","_ol_source_Tile_","opaque_","tilePixelRatio_","tileCache","tmpSize","key_","tileOptions","getTileCacheForProjection","forEachLoadedTile","tileRange","callback","tileCoordKey","loaded","covered","x","y","getKeyZXY","containsKey","get","getGutter","setKey","getOpaque","getResolutions","getTile","getTileGrid","getTileGridForProjection","getForProjection","thisProj","getProjection","equivalent","getTilePixelRatio","getTilePixelSize","toSize","scale","getTileCoordForTileUrlFunction","opt_projection","getWrapX","isGlobal","withinExtentAndZ","refresh","clear","useTile","nullFunction","Event","type","_ol_source_TileEventType_","TILELOADSTART","TILELOADEND","TILELOADERROR","_ol_source_UrlTile_","fixedTileUrlFunction","nullTileUrlFunction","setUrls","setUrl","setTileUrlFunction","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getUrls","handleTileChange","event","uid","getUid","tileState","setTileLoadFunction","opt_key","expandUrl","createFromTemplates","join","_ol_source_TileImage_","defaultTileLoadFunction","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","renderReprojectionEdges_","ENABLE_RASTER_REPROJECTION","usedTileCache","getGutterInternal","projKey","highWaterMark","createTile_","urlTileCoord","tileUrl","sourceProjection","cache","newTile","getTileInternal","replace","set","setRenderReprojectionEdges","setTileGridForProjection","tilegrid","proj","imageTile","_ol_layer_TileProperty_","PRELOAD","USE_INTERIM_TILES_ON_ERROR","_ol_layer_Tile_","baseOptions","assign","preload","useInterimTilesOnError","setPreload","setUseInterimTilesOnError","TILE","getPreload","getSource","getUseInterimTilesOnError","_ol_TileUrlFunction_","template","zRegEx","xRegEx","yRegEx","dashYRegEx","range","getFullTileRange","assert","getHeight","templates","len","tileUrlFunctions","Array","createFromTemplate","createFromTileUrlFunctions","h","hash","index","modulo","match","exec","charCode","startCharCode","charCodeAt","stopCharCode","String","fromCharCode","stop","parseInt"],"mappings":"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","file":"js/chunk-1b0fcc4d.3d4b8098.js","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_source_TileImage_ from '../source/tileimage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nvar _ol_source_XYZ_ = function(opt_options) {\n  var options = opt_options || {};\n  var projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  var tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    _ol_tilegrid_.createXYZ({\n      extent: _ol_tilegrid_.extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  _ol_source_TileImage_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\n_ol_.inherits(_ol_source_XYZ_, _ol_source_TileImage_);\nexport default _ol_source_XYZ_;\n","import _ol_ from './index.js';\nimport _ol_TileState_ from './tilestate.js';\nimport _ol_easing_ from './easing.js';\nimport _ol_events_EventTarget_ from './events/eventtarget.js';\nimport _ol_events_EventType_ from './events/eventtype.js';\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @constructor\n * @abstract\n * @extends {ol.events.EventTarget}\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.TileState} state State.\n * @param {olx.TileOptions=} opt_options Tile options.\n */\nvar _ol_Tile_ = function(tileCoord, state, opt_options) {\n  _ol_events_EventTarget_.call(this);\n\n  var options = opt_options ? opt_options : {};\n\n  /**\n   * @type {ol.TileCoord}\n   */\n  this.tileCoord = tileCoord;\n\n  /**\n   * @protected\n   * @type {ol.TileState}\n   */\n  this.state = state;\n\n  /**\n   * An \"interim\" tile for this tile. The interim tile may be used while this\n   * one is loading, for \"smooth\" transitions when changing params/dimensions\n   * on the source.\n   * @type {ol.Tile}\n   */\n  this.interimTile = null;\n\n  /**\n   * A key assigned to the tile. This is used by the tile source to determine\n   * if this tile can effectively be used, or if a new tile should be created\n   * and this one be used as an interim tile for this new tile.\n   * @type {string}\n   */\n  this.key = '';\n\n  /**\n   * The duration for the opacity transition.\n   * @type {number}\n   */\n  this.transition_ = options.transition === undefined ?\n    250 : options.transition;\n\n  /**\n   * Lookup of start times for rendering transitions.  If the start time is\n   * equal to -1, the transition is complete.\n   * @type {Object.<number, number>}\n   */\n  this.transitionStarts_ = {};\n\n};\n\n_ol_.inherits(_ol_Tile_, _ol_events_EventTarget_);\n\n\n/**\n * @protected\n */\n_ol_Tile_.prototype.changed = function() {\n  this.dispatchEvent(_ol_events_EventType_.CHANGE);\n};\n\n\n/**\n * @return {string} Key.\n */\n_ol_Tile_.prototype.getKey = function() {\n  return this.key + '/' + this.tileCoord;\n};\n\n/**\n * Get the interim tile most suitable for rendering using the chain of interim\n * tiles. This corresponds to the  most recent tile that has been loaded, if no\n * such tile exists, the original tile is returned.\n * @return {!ol.Tile} Best tile for rendering.\n */\n_ol_Tile_.prototype.getInterimTile = function() {\n  if (!this.interimTile) {\n    //empty chain\n    return this;\n  }\n  var tile = this.interimTile;\n\n  // find the first loaded tile and return it. Since the chain is sorted in\n  // decreasing order of creation time, there is no need to search the remainder\n  // of the list (all those tiles correspond to older requests and will be\n  // cleaned up by refreshInterimChain)\n  do {\n    if (tile.getState() == _ol_TileState_.LOADED) {\n      return tile;\n    }\n    tile = tile.interimTile;\n  } while (tile);\n\n  // we can not find a better tile\n  return this;\n};\n\n/**\n * Goes through the chain of interim tiles and discards sections of the chain\n * that are no longer relevant.\n */\n_ol_Tile_.prototype.refreshInterimChain = function() {\n  if (!this.interimTile) {\n    return;\n  }\n\n  var tile = this.interimTile;\n  var prev = this;\n\n  do {\n    if (tile.getState() == _ol_TileState_.LOADED) {\n      //we have a loaded tile, we can discard the rest of the list\n      //we would could abort any LOADING tile request\n      //older than this tile (i.e. any LOADING tile following this entry in the chain)\n      tile.interimTile = null;\n      break;\n    } else if (tile.getState() == _ol_TileState_.LOADING) {\n      //keep this LOADING tile any loaded tiles later in the chain are\n      //older than this tile, so we're still interested in the request\n      prev = tile;\n    } else if (tile.getState() == _ol_TileState_.IDLE) {\n      //the head of the list is the most current tile, we don't need\n      //to start any other requests for this chain\n      prev.interimTile = tile.interimTile;\n    } else {\n      prev = tile;\n    }\n    tile = prev.interimTile;\n  } while (tile);\n};\n\n/**\n * Get the tile coordinate for this tile.\n * @return {ol.TileCoord} The tile coordinate.\n * @api\n */\n_ol_Tile_.prototype.getTileCoord = function() {\n  return this.tileCoord;\n};\n\n\n/**\n * @return {ol.TileState} State.\n */\n_ol_Tile_.prototype.getState = function() {\n  return this.state;\n};\n\n/**\n * @param {ol.TileState} state State.\n */\n_ol_Tile_.prototype.setState = function(state) {\n  this.state = state;\n  this.changed();\n};\n\n/**\n * Load the image or retry if loading previously failed.\n * Loading is taken care of by the tile queue, and calling this method is\n * only needed for preloading or for reloading in case of an error.\n * @abstract\n * @api\n */\n_ol_Tile_.prototype.load = function() {};\n\n/**\n * Get the alpha value for rendering.\n * @param {number} id An id for the renderer.\n * @param {number} time The render frame time.\n * @return {number} A number between 0 and 1.\n */\n_ol_Tile_.prototype.getAlpha = function(id, time) {\n  if (!this.transition_) {\n    return 1;\n  }\n\n  var start = this.transitionStarts_[id];\n  if (!start) {\n    start = time;\n    this.transitionStarts_[id] = start;\n  } else if (start === -1) {\n    return 1;\n  }\n\n  var delta = time - start + (1000 / 60); // avoid rendering at 0\n  if (delta >= this.transition_) {\n    return 1;\n  }\n  return _ol_easing_.easeIn(delta / this.transition_);\n};\n\n/**\n * Determine if a tile is in an alpha transition.  A tile is considered in\n * transition if tile.getAlpha() has not yet been called or has been called\n * and returned 1.\n * @param {number} id An id for the renderer.\n * @return {boolean} The tile is in transition.\n */\n_ol_Tile_.prototype.inTransition = function(id) {\n  if (!this.transition_) {\n    return false;\n  }\n  return this.transitionStarts_[id] !== -1;\n};\n\n/**\n * Mark a transition as complete.\n * @param {number} id An id for the renderer.\n */\n_ol_Tile_.prototype.endTransition = function(id) {\n  if (this.transition_) {\n    this.transitionStarts_[id] = -1;\n  }\n};\nexport default _ol_Tile_;\n","import _ol_ from './index.js';\nimport _ol_Tile_ from './tile.js';\nimport _ol_TileState_ from './tilestate.js';\nimport _ol_dom_ from './dom.js';\nimport _ol_events_ from './events.js';\nimport _ol_events_EventType_ from './events/eventtype.js';\n\n/**\n * @constructor\n * @extends {ol.Tile}\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.TileState} state State.\n * @param {string} src Image source URI.\n * @param {?string} crossOrigin Cross origin.\n * @param {ol.TileLoadFunctionType} tileLoadFunction Tile load function.\n * @param {olx.TileOptions=} opt_options Tile options.\n */\nvar _ol_ImageTile_ = function(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n\n  _ol_Tile_.call(this, tileCoord, state, opt_options);\n\n  /**\n   * @private\n   * @type {?string}\n   */\n  this.crossOrigin_ = crossOrigin;\n\n  /**\n   * Image URI\n   *\n   * @private\n   * @type {string}\n   */\n  this.src_ = src;\n\n  /**\n   * @private\n   * @type {Image|HTMLCanvasElement}\n   */\n  this.image_ = new Image();\n  if (crossOrigin !== null) {\n    this.image_.crossOrigin = crossOrigin;\n  }\n\n  /**\n   * @private\n   * @type {Array.<ol.EventsKey>}\n   */\n  this.imageListenerKeys_ = null;\n\n  /**\n   * @private\n   * @type {ol.TileLoadFunctionType}\n   */\n  this.tileLoadFunction_ = tileLoadFunction;\n\n};\n\n_ol_.inherits(_ol_ImageTile_, _ol_Tile_);\n\n\n/**\n * @inheritDoc\n */\n_ol_ImageTile_.prototype.disposeInternal = function() {\n  if (this.state == _ol_TileState_.LOADING) {\n    this.unlistenImage_();\n    this.image_ = _ol_ImageTile_.getBlankImage();\n  }\n  if (this.interimTile) {\n    this.interimTile.dispose();\n  }\n  this.state = _ol_TileState_.ABORT;\n  this.changed();\n  _ol_Tile_.prototype.disposeInternal.call(this);\n};\n\n\n/**\n * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n * @api\n */\n_ol_ImageTile_.prototype.getImage = function() {\n  return this.image_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_ImageTile_.prototype.getKey = function() {\n  return this.src_;\n};\n\n\n/**\n * Tracks loading or read errors.\n *\n * @private\n */\n_ol_ImageTile_.prototype.handleImageError_ = function() {\n  this.state = _ol_TileState_.ERROR;\n  this.unlistenImage_();\n  this.image_ = _ol_ImageTile_.getBlankImage();\n  this.changed();\n};\n\n\n/**\n * Tracks successful image load.\n *\n * @private\n */\n_ol_ImageTile_.prototype.handleImageLoad_ = function() {\n  if (this.image_.naturalWidth && this.image_.naturalHeight) {\n    this.state = _ol_TileState_.LOADED;\n  } else {\n    this.state = _ol_TileState_.EMPTY;\n  }\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_ImageTile_.prototype.load = function() {\n  if (this.state == _ol_TileState_.ERROR) {\n    this.state = _ol_TileState_.IDLE;\n    this.image_ = new Image();\n    if (this.crossOrigin_ !== null) {\n      this.image_.crossOrigin = this.crossOrigin_;\n    }\n  }\n  if (this.state == _ol_TileState_.IDLE) {\n    this.state = _ol_TileState_.LOADING;\n    this.changed();\n    this.imageListenerKeys_ = [\n      _ol_events_.listenOnce(this.image_, _ol_events_EventType_.ERROR,\n          this.handleImageError_, this),\n      _ol_events_.listenOnce(this.image_, _ol_events_EventType_.LOAD,\n          this.handleImageLoad_, this)\n    ];\n    this.tileLoadFunction_(this, this.src_);\n  }\n};\n\n\n/**\n * Discards event handlers which listen for load completion or errors.\n *\n * @private\n */\n_ol_ImageTile_.prototype.unlistenImage_ = function() {\n  this.imageListenerKeys_.forEach(_ol_events_.unlistenByKey);\n  this.imageListenerKeys_ = null;\n};\n\n\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\n_ol_ImageTile_.getBlankImage = function() {\n  var ctx = _ol_dom_.createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n};\nexport default _ol_ImageTile_;\n","import _ol_ from './index.js';\nimport _ol_structs_LRUCache_ from './structs/lrucache.js';\nimport _ol_tilecoord_ from './tilecoord.js';\n\n/**\n * @constructor\n * @extends {ol.structs.LRUCache.<ol.Tile>}\n * @param {number=} opt_highWaterMark High water mark.\n * @struct\n */\nvar _ol_TileCache_ = function(opt_highWaterMark) {\n\n  _ol_structs_LRUCache_.call(this, opt_highWaterMark);\n\n};\n\n_ol_.inherits(_ol_TileCache_, _ol_structs_LRUCache_);\n\n\n/**\n * @param {Object.<string, ol.TileRange>} usedTiles Used tiles.\n */\n_ol_TileCache_.prototype.expireCache = function(usedTiles) {\n  var tile, zKey;\n  while (this.canExpireCache()) {\n    tile = this.peekLast();\n    zKey = tile.tileCoord[0].toString();\n    if (zKey in usedTiles && usedTiles[zKey].contains(tile.tileCoord)) {\n      break;\n    } else {\n      this.pop().dispose();\n    }\n  }\n};\n\n\n/**\n * Prune all tiles from the cache that don't have the same z as the newest tile.\n */\n_ol_TileCache_.prototype.pruneExceptNewestZ = function() {\n  if (this.getCount() === 0) {\n    return;\n  }\n  var key = this.peekFirstKey();\n  var tileCoord = _ol_tilecoord_.fromKey(key);\n  var z = tileCoord[0];\n  this.forEach(function(tile) {\n    if (tile.tileCoord[0] !== z) {\n      this.remove(_ol_tilecoord_.getKey(tile.tileCoord));\n      tile.dispose();\n    }\n  }, this);\n};\nexport default _ol_TileCache_;\n","import _ol_ from '../index.js';\nimport _ol_Tile_ from '../tile.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_events_ from '../events.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_extent_ from '../extent.js';\nimport _ol_math_ from '../math.js';\nimport _ol_reproj_ from '../reproj.js';\nimport _ol_reproj_Triangulation_ from '../reproj/triangulation.js';\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link ol.source.TileImage}.\n *\n * @constructor\n * @extends {ol.Tile}\n * @param {ol.proj.Projection} sourceProj Source projection.\n * @param {ol.tilegrid.TileGrid} sourceTileGrid Source tile grid.\n * @param {ol.proj.Projection} targetProj Target projection.\n * @param {ol.tilegrid.TileGrid} targetTileGrid Target tile grid.\n * @param {ol.TileCoord} tileCoord Coordinate of the tile.\n * @param {ol.TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} gutter Gutter of the source tiles.\n * @param {ol.ReprojTileFunctionType} getTileFunction\n *     Function returning source tiles (z, x, y, pixelRatio).\n * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).\n * @param {boolean=} opt_renderEdges Render reprojection edges.\n */\nvar _ol_reproj_Tile_ = function(sourceProj, sourceTileGrid,\n    targetProj, targetTileGrid, tileCoord, wrappedTileCoord,\n    pixelRatio, gutter, getTileFunction,\n    opt_errorThreshold, opt_renderEdges) {\n  _ol_Tile_.call(this, tileCoord, _ol_TileState_.IDLE);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.pixelRatio_ = pixelRatio;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.gutter_ = gutter;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n  this.canvas_ = null;\n\n  /**\n   * @private\n   * @type {ol.tilegrid.TileGrid}\n   */\n  this.sourceTileGrid_ = sourceTileGrid;\n\n  /**\n   * @private\n   * @type {ol.tilegrid.TileGrid}\n   */\n  this.targetTileGrid_ = targetTileGrid;\n\n  /**\n   * @private\n   * @type {ol.TileCoord}\n   */\n  this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n  /**\n   * @private\n   * @type {!Array.<ol.Tile>}\n   */\n  this.sourceTiles_ = [];\n\n  /**\n   * @private\n   * @type {Array.<ol.EventsKey>}\n   */\n  this.sourcesListenerKeys_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.sourceZ_ = 0;\n\n  var targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);\n  var maxTargetExtent = this.targetTileGrid_.getExtent();\n  var maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n  var limitedTargetExtent = maxTargetExtent ?\n    _ol_extent_.getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n\n  if (_ol_extent_.getArea(limitedTargetExtent) === 0) {\n    // Tile is completely outside range -> EMPTY\n    // TODO: is it actually correct that the source even creates the tile ?\n    this.state = _ol_TileState_.EMPTY;\n    return;\n  }\n\n  var sourceProjExtent = sourceProj.getExtent();\n  if (sourceProjExtent) {\n    if (!maxSourceExtent) {\n      maxSourceExtent = sourceProjExtent;\n    } else {\n      maxSourceExtent = _ol_extent_.getIntersection(\n          maxSourceExtent, sourceProjExtent);\n    }\n  }\n\n  var targetResolution = targetTileGrid.getResolution(\n      this.wrappedTileCoord_[0]);\n\n  var targetCenter = _ol_extent_.getCenter(limitedTargetExtent);\n  var sourceResolution = _ol_reproj_.calculateSourceResolution(\n      sourceProj, targetProj, targetCenter, targetResolution);\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    // invalid sourceResolution -> EMPTY\n    // probably edges of the projections when no extent is defined\n    this.state = _ol_TileState_.EMPTY;\n    return;\n  }\n\n  var errorThresholdInPixels = opt_errorThreshold !== undefined ?\n    opt_errorThreshold : _ol_.DEFAULT_RASTER_REPROJECTION_ERROR_THRESHOLD;\n\n  /**\n   * @private\n   * @type {!ol.reproj.Triangulation}\n   */\n  this.triangulation_ = new _ol_reproj_Triangulation_(\n      sourceProj, targetProj, limitedTargetExtent, maxSourceExtent,\n      sourceResolution * errorThresholdInPixels);\n\n  if (this.triangulation_.getTriangles().length === 0) {\n    // no valid triangles -> EMPTY\n    this.state = _ol_TileState_.EMPTY;\n    return;\n  }\n\n  this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n  var sourceExtent = this.triangulation_.calculateSourceExtent();\n\n  if (maxSourceExtent) {\n    if (sourceProj.canWrapX()) {\n      sourceExtent[1] = _ol_math_.clamp(\n          sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n      sourceExtent[3] = _ol_math_.clamp(\n          sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n    } else {\n      sourceExtent = _ol_extent_.getIntersection(sourceExtent, maxSourceExtent);\n    }\n  }\n\n  if (!_ol_extent_.getArea(sourceExtent)) {\n    this.state = _ol_TileState_.EMPTY;\n  } else {\n    var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\n        sourceExtent, this.sourceZ_);\n\n    for (var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n      for (var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n        var tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n        if (tile) {\n          this.sourceTiles_.push(tile);\n        }\n      }\n    }\n\n    if (this.sourceTiles_.length === 0) {\n      this.state = _ol_TileState_.EMPTY;\n    }\n  }\n};\n\n_ol_.inherits(_ol_reproj_Tile_, _ol_Tile_);\n\n\n/**\n * @inheritDoc\n */\n_ol_reproj_Tile_.prototype.disposeInternal = function() {\n  if (this.state == _ol_TileState_.LOADING) {\n    this.unlistenSources_();\n  }\n  _ol_Tile_.prototype.disposeInternal.call(this);\n};\n\n\n/**\n * Get the HTML Canvas element for this tile.\n * @return {HTMLCanvasElement} Canvas.\n */\n_ol_reproj_Tile_.prototype.getImage = function() {\n  return this.canvas_;\n};\n\n\n/**\n * @private\n */\n_ol_reproj_Tile_.prototype.reproject_ = function() {\n  var sources = [];\n  this.sourceTiles_.forEach(function(tile, i, arr) {\n    if (tile && tile.getState() == _ol_TileState_.LOADED) {\n      sources.push({\n        extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n        image: tile.getImage()\n      });\n    }\n  }, this);\n  this.sourceTiles_.length = 0;\n\n  if (sources.length === 0) {\n    this.state = _ol_TileState_.ERROR;\n  } else {\n    var z = this.wrappedTileCoord_[0];\n    var size = this.targetTileGrid_.getTileSize(z);\n    var width = typeof size === 'number' ? size : size[0];\n    var height = typeof size === 'number' ? size : size[1];\n    var targetResolution = this.targetTileGrid_.getResolution(z);\n    var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n\n    var targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_);\n    this.canvas_ = _ol_reproj_.render(width, height, this.pixelRatio_,\n        sourceResolution, this.sourceTileGrid_.getExtent(),\n        targetResolution, targetExtent, this.triangulation_, sources,\n        this.gutter_, this.renderEdges_);\n\n    this.state = _ol_TileState_.LOADED;\n  }\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_reproj_Tile_.prototype.load = function() {\n  if (this.state == _ol_TileState_.IDLE) {\n    this.state = _ol_TileState_.LOADING;\n    this.changed();\n\n    var leftToLoad = 0;\n\n    this.sourcesListenerKeys_ = [];\n    this.sourceTiles_.forEach(function(tile, i, arr) {\n      var state = tile.getState();\n      if (state == _ol_TileState_.IDLE || state == _ol_TileState_.LOADING) {\n        leftToLoad++;\n\n        var sourceListenKey;\n        sourceListenKey = _ol_events_.listen(tile, _ol_events_EventType_.CHANGE,\n            function(e) {\n              var state = tile.getState();\n              if (state == _ol_TileState_.LOADED ||\n                  state == _ol_TileState_.ERROR ||\n                  state == _ol_TileState_.EMPTY) {\n                _ol_events_.unlistenByKey(sourceListenKey);\n                leftToLoad--;\n                if (leftToLoad === 0) {\n                  this.unlistenSources_();\n                  this.reproject_();\n                }\n              }\n            }, this);\n        this.sourcesListenerKeys_.push(sourceListenKey);\n      }\n    }, this);\n\n    this.sourceTiles_.forEach(function(tile, i, arr) {\n      var state = tile.getState();\n      if (state == _ol_TileState_.IDLE) {\n        tile.load();\n      }\n    });\n\n    if (leftToLoad === 0) {\n      setTimeout(this.reproject_.bind(this), 0);\n    }\n  }\n};\n\n\n/**\n * @private\n */\n_ol_reproj_Tile_.prototype.unlistenSources_ = function() {\n  this.sourcesListenerKeys_.forEach(_ol_events_.unlistenByKey);\n  this.sourcesListenerKeys_ = null;\n};\nexport default _ol_reproj_Tile_;\n","import _ol_ from '../index.js';\nimport _ol_TileCache_ from '../tilecache.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_events_Event_ from '../events/event.js';\nimport _ol_proj_ from '../proj.js';\nimport _ol_size_ from '../size.js';\nimport _ol_source_Source_ from '../source/source.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n *\n * @constructor\n * @abstract\n * @extends {ol.source.Source}\n * @param {ol.SourceTileOptions} options Tile source options.\n * @api\n */\nvar _ol_source_Tile_ = function(options) {\n\n  _ol_source_Source_.call(this, {\n    attributions: options.attributions,\n    extent: options.extent,\n    logo: options.logo,\n    projection: options.projection,\n    state: options.state,\n    wrapX: options.wrapX\n  });\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?\n    options.tilePixelRatio : 1;\n\n  /**\n   * @protected\n   * @type {ol.tilegrid.TileGrid}\n   */\n  this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n  /**\n   * @protected\n   * @type {ol.TileCache}\n   */\n  this.tileCache = new _ol_TileCache_(options.cacheSize);\n\n  /**\n   * @protected\n   * @type {ol.Size}\n   */\n  this.tmpSize = [0, 0];\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.key_ = '';\n\n  /**\n   * @protected\n   * @type {olx.TileOptions}\n   */\n  this.tileOptions = {transition: options.transition};\n\n};\n\n_ol_.inherits(_ol_source_Tile_, _ol_source_Source_);\n\n\n/**\n * @return {boolean} Can expire cache.\n */\n_ol_source_Tile_.prototype.canExpireCache = function() {\n  return this.tileCache.canExpireCache();\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object.<string, ol.TileRange>} usedTiles Used tiles.\n */\n_ol_source_Tile_.prototype.expireCache = function(projection, usedTiles) {\n  var tileCache = this.getTileCacheForProjection(projection);\n  if (tileCache) {\n    tileCache.expireCache(usedTiles);\n  }\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @param {number} z Zoom level.\n * @param {ol.TileRange} tileRange Tile range.\n * @param {function(ol.Tile):(boolean|undefined)} callback Called with each\n *     loaded tile.  If the callback returns `false`, the tile will not be\n *     considered loaded.\n * @return {boolean} The tile range is fully covered with loaded tiles.\n */\n_ol_source_Tile_.prototype.forEachLoadedTile = function(projection, z, tileRange, callback) {\n  var tileCache = this.getTileCacheForProjection(projection);\n  if (!tileCache) {\n    return false;\n  }\n\n  var covered = true;\n  var tile, tileCoordKey, loaded;\n  for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n    for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n      tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n      loaded = false;\n      if (tileCache.containsKey(tileCoordKey)) {\n        tile = /** @type {!ol.Tile} */ (tileCache.get(tileCoordKey));\n        loaded = tile.getState() === _ol_TileState_.LOADED;\n        if (loaded) {\n          loaded = (callback(tile) !== false);\n        }\n      }\n      if (!loaded) {\n        covered = false;\n      }\n    }\n  }\n  return covered;\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {number} Gutter.\n */\n_ol_source_Tile_.prototype.getGutter = function(projection) {\n  return 0;\n};\n\n\n/**\n * Return the key to be used for all tiles in the source.\n * @return {string} The key for all tiles.\n * @protected\n */\n_ol_source_Tile_.prototype.getKey = function() {\n  return this.key_;\n};\n\n\n/**\n * Set the value to be used as the key for all tiles in the source.\n * @param {string} key The key for tiles.\n * @protected\n */\n_ol_source_Tile_.prototype.setKey = function(key) {\n  if (this.key_ !== key) {\n    this.key_ = key;\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {boolean} Opaque.\n */\n_ol_source_Tile_.prototype.getOpaque = function(projection) {\n  return this.opaque_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_Tile_.prototype.getResolutions = function() {\n  return this.tileGrid.getResolutions();\n};\n\n\n/**\n * @abstract\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @return {!ol.Tile} Tile.\n */\n_ol_source_Tile_.prototype.getTile = function(z, x, y, pixelRatio, projection) {};\n\n\n/**\n * Return the tile grid of the tile source.\n * @return {ol.tilegrid.TileGrid} Tile grid.\n * @api\n */\n_ol_source_Tile_.prototype.getTileGrid = function() {\n  return this.tileGrid;\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {!ol.tilegrid.TileGrid} Tile grid.\n */\n_ol_source_Tile_.prototype.getTileGridForProjection = function(projection) {\n  if (!this.tileGrid) {\n    return _ol_tilegrid_.getForProjection(projection);\n  } else {\n    return this.tileGrid;\n  }\n};\n\n\n/**\n * @param {ol.proj.Projection} projection Projection.\n * @return {ol.TileCache} Tile cache.\n * @protected\n */\n_ol_source_Tile_.prototype.getTileCacheForProjection = function(projection) {\n  var thisProj = this.getProjection();\n  if (thisProj && !_ol_proj_.equivalent(thisProj, projection)) {\n    return null;\n  } else {\n    return this.tileCache;\n  }\n};\n\n\n/**\n * Get the tile pixel ratio for this source. Subclasses may override this\n * method, which is meant to return a supported pixel ratio that matches the\n * provided `pixelRatio` as close as possible.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Tile pixel ratio.\n */\n_ol_source_Tile_.prototype.getTilePixelRatio = function(pixelRatio) {\n  return this.tilePixelRatio_;\n};\n\n\n/**\n * @param {number} z Z.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @return {ol.Size} Tile size.\n */\n_ol_source_Tile_.prototype.getTilePixelSize = function(z, pixelRatio, projection) {\n  var tileGrid = this.getTileGridForProjection(projection);\n  var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n  var tileSize = _ol_size_.toSize(tileGrid.getTileSize(z), this.tmpSize);\n  if (tilePixelRatio == 1) {\n    return tileSize;\n  } else {\n    return _ol_size_.scale(tileSize, tilePixelRatio, this.tmpSize);\n  }\n};\n\n\n/**\n * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n * is outside the resolution and extent range of the tile grid, `null` will be\n * returned.\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.proj.Projection=} opt_projection Projection.\n * @return {ol.TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n *     null if no tile URL should be created for the passed `tileCoord`.\n */\n_ol_source_Tile_.prototype.getTileCoordForTileUrlFunction = function(tileCoord, opt_projection) {\n  var projection = opt_projection !== undefined ?\n    opt_projection : this.getProjection();\n  var tileGrid = this.getTileGridForProjection(projection);\n  if (this.getWrapX() && projection.isGlobal()) {\n    tileCoord = _ol_tilegrid_.wrapX(tileGrid, tileCoord, projection);\n  }\n  return _ol_tilecoord_.withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_Tile_.prototype.refresh = function() {\n  this.tileCache.clear();\n  this.changed();\n};\n\n\n/**\n * Marks a tile coord as being used, without triggering a load.\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {ol.proj.Projection} projection Projection.\n */\n_ol_source_Tile_.prototype.useTile = _ol_.nullFunction;\n\n\n/**\n * @classdesc\n * Events emitted by {@link ol.source.Tile} instances are instances of this\n * type.\n *\n * @constructor\n * @extends {ol.events.Event}\n * @implements {oli.source.Tile.Event}\n * @param {string} type Type.\n * @param {ol.Tile} tile The tile.\n */\n_ol_source_Tile_.Event = function(type, tile) {\n\n  _ol_events_Event_.call(this, type);\n\n  /**\n   * The tile related to the event.\n   * @type {ol.Tile}\n   * @api\n   */\n  this.tile = tile;\n\n};\n_ol_.inherits(_ol_source_Tile_.Event, _ol_events_Event_);\nexport default _ol_source_Tile_;\n","/**\n * @enum {string}\n */\nvar _ol_source_TileEventType_ = {\n\n  /**\n   * Triggered when a tile starts loading.\n   * @event ol.source.Tile.Event#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event ol.source.Tile.Event#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error.\n   * @event ol.source.Tile.Event#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror'\n\n};\n\nexport default _ol_source_TileEventType_;\n","import _ol_ from '../index.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_TileUrlFunction_ from '../tileurlfunction.js';\nimport _ol_source_Tile_ from '../source/tile.js';\nimport _ol_source_TileEventType_ from '../source/tileeventtype.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @constructor\n * @abstract\n * @fires ol.source.Tile.Event\n * @extends {ol.source.Tile}\n * @param {ol.SourceUrlTileOptions} options Image tile options.\n */\nvar _ol_source_UrlTile_ = function(options) {\n\n  _ol_source_Tile_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    extent: options.extent,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: options.projection,\n    state: options.state,\n    tileGrid: options.tileGrid,\n    tilePixelRatio: options.tilePixelRatio,\n    wrapX: options.wrapX,\n    transition: options.transition\n  });\n\n  /**\n   * @protected\n   * @type {ol.TileLoadFunctionType}\n   */\n  this.tileLoadFunction = options.tileLoadFunction;\n\n  /**\n   * @protected\n   * @type {ol.TileUrlFunctionType}\n   */\n  this.tileUrlFunction = this.fixedTileUrlFunction ?\n    this.fixedTileUrlFunction.bind(this) :\n    _ol_TileUrlFunction_.nullTileUrlFunction;\n\n  /**\n   * @protected\n   * @type {!Array.<string>|null}\n   */\n  this.urls = null;\n\n  if (options.urls) {\n    this.setUrls(options.urls);\n  } else if (options.url) {\n    this.setUrl(options.url);\n  }\n  if (options.tileUrlFunction) {\n    this.setTileUrlFunction(options.tileUrlFunction);\n  }\n\n  /**\n   * @private\n   * @type {Object.<number, boolean>}\n   */\n  this.tileLoadingKeys_ = {};\n\n};\n\n_ol_.inherits(_ol_source_UrlTile_, _ol_source_Tile_);\n\n\n/**\n * @type {ol.TileUrlFunctionType|undefined}\n * @protected\n */\n_ol_source_UrlTile_.prototype.fixedTileUrlFunction;\n\n/**\n * Return the tile load function of the source.\n * @return {ol.TileLoadFunctionType} TileLoadFunction\n * @api\n */\n_ol_source_UrlTile_.prototype.getTileLoadFunction = function() {\n  return this.tileLoadFunction;\n};\n\n\n/**\n * Return the tile URL function of the source.\n * @return {ol.TileUrlFunctionType} TileUrlFunction\n * @api\n */\n_ol_source_UrlTile_.prototype.getTileUrlFunction = function() {\n  return this.tileUrlFunction;\n};\n\n\n/**\n * Return the URLs used for this source.\n * When a tileUrlFunction is used instead of url or urls,\n * null will be returned.\n * @return {!Array.<string>|null} URLs.\n * @api\n */\n_ol_source_UrlTile_.prototype.getUrls = function() {\n  return this.urls;\n};\n\n\n/**\n * Handle tile change events.\n * @param {ol.events.Event} event Event.\n * @protected\n */\n_ol_source_UrlTile_.prototype.handleTileChange = function(event) {\n  var tile = /** @type {ol.Tile} */ (event.target);\n  var uid = _ol_.getUid(tile);\n  var tileState = tile.getState();\n  var type;\n  if (tileState == _ol_TileState_.LOADING) {\n    this.tileLoadingKeys_[uid] = true;\n    type = _ol_source_TileEventType_.TILELOADSTART;\n  } else if (uid in this.tileLoadingKeys_) {\n    delete this.tileLoadingKeys_[uid];\n    type = tileState == _ol_TileState_.ERROR ? _ol_source_TileEventType_.TILELOADERROR :\n      (tileState == _ol_TileState_.LOADED || tileState == _ol_TileState_.ABORT) ?\n        _ol_source_TileEventType_.TILELOADEND : undefined;\n  }\n  if (type != undefined) {\n    this.dispatchEvent(new _ol_source_Tile_.Event(type, tile));\n  }\n};\n\n\n/**\n * Set the tile load function of the source.\n * @param {ol.TileLoadFunctionType} tileLoadFunction Tile load function.\n * @api\n */\n_ol_source_UrlTile_.prototype.setTileLoadFunction = function(tileLoadFunction) {\n  this.tileCache.clear();\n  this.tileLoadFunction = tileLoadFunction;\n  this.changed();\n};\n\n\n/**\n * Set the tile URL function of the source.\n * @param {ol.TileUrlFunctionType} tileUrlFunction Tile URL function.\n * @param {string=} opt_key Optional new tile key for the source.\n * @api\n */\n_ol_source_UrlTile_.prototype.setTileUrlFunction = function(tileUrlFunction, opt_key) {\n  this.tileUrlFunction = tileUrlFunction;\n  this.tileCache.pruneExceptNewestZ();\n  if (typeof opt_key !== 'undefined') {\n    this.setKey(opt_key);\n  } else {\n    this.changed();\n  }\n};\n\n\n/**\n * Set the URL to use for requests.\n * @param {string} url URL.\n * @api\n */\n_ol_source_UrlTile_.prototype.setUrl = function(url) {\n  var urls = this.urls = _ol_TileUrlFunction_.expandUrl(url);\n  this.setTileUrlFunction(this.fixedTileUrlFunction ?\n    this.fixedTileUrlFunction.bind(this) :\n    _ol_TileUrlFunction_.createFromTemplates(urls, this.tileGrid), url);\n};\n\n\n/**\n * Set the URLs to use for requests.\n * @param {Array.<string>} urls URLs.\n * @api\n */\n_ol_source_UrlTile_.prototype.setUrls = function(urls) {\n  this.urls = urls;\n  var key = urls.join('\\n');\n  this.setTileUrlFunction(this.fixedTileUrlFunction ?\n    this.fixedTileUrlFunction.bind(this) :\n    _ol_TileUrlFunction_.createFromTemplates(urls, this.tileGrid), key);\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_UrlTile_.prototype.useTile = function(z, x, y) {\n  var tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n  if (this.tileCache.containsKey(tileCoordKey)) {\n    this.tileCache.get(tileCoordKey);\n  }\n};\nexport default _ol_source_UrlTile_;\n","import _ol_ from '../index.js';\nimport _ol_ImageTile_ from '../imagetile.js';\nimport _ol_TileCache_ from '../tilecache.js';\nimport _ol_TileState_ from '../tilestate.js';\nimport _ol_events_ from '../events.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_proj_ from '../proj.js';\nimport _ol_reproj_Tile_ from '../reproj/tile.js';\nimport _ol_source_UrlTile_ from '../source/urltile.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @constructor\n * @fires ol.source.Tile.Event\n * @extends {ol.source.UrlTile}\n * @param {olx.source.TileImageOptions} options Image tile options.\n * @api\n */\nvar _ol_source_TileImage_ = function(options) {\n\n  _ol_source_UrlTile_.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    extent: options.extent,\n    logo: options.logo,\n    opaque: options.opaque,\n    projection: options.projection,\n    state: options.state,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction ?\n      options.tileLoadFunction : _ol_source_TileImage_.defaultTileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX,\n    transition: options.transition\n  });\n\n  /**\n   * @protected\n   * @type {?string}\n   */\n  this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @protected\n   * @type {function(new: ol.ImageTile, ol.TileCoord, ol.TileState, string,\n   *        ?string, ol.TileLoadFunctionType, olx.TileOptions=)}\n   */\n  this.tileClass = options.tileClass !== undefined ?\n    options.tileClass : _ol_ImageTile_;\n\n  /**\n   * @protected\n   * @type {Object.<string, ol.TileCache>}\n   */\n  this.tileCacheForProjection = {};\n\n  /**\n   * @protected\n   * @type {Object.<string, ol.tilegrid.TileGrid>}\n   */\n  this.tileGridForProjection = {};\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.renderReprojectionEdges_ = false;\n};\n\n_ol_.inherits(_ol_source_TileImage_, _ol_source_UrlTile_);\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.canExpireCache = function() {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.canExpireCache.call(this);\n  }\n  if (this.tileCache.canExpireCache()) {\n    return true;\n  } else {\n    for (var key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.expireCache = function(projection, usedTiles) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    _ol_source_UrlTile_.prototype.expireCache.call(this, projection, usedTiles);\n    return;\n  }\n  var usedTileCache = this.getTileCacheForProjection(projection);\n\n  this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n  for (var id in this.tileCacheForProjection) {\n    var tileCache = this.tileCacheForProjection[id];\n    tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getGutter = function(projection) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION &&\n      this.getProjection() && projection &&\n      !_ol_proj_.equivalent(this.getProjection(), projection)) {\n    return 0;\n  } else {\n    return this.getGutterInternal();\n  }\n};\n\n\n/**\n * @protected\n * @return {number} Gutter.\n */\n_ol_source_TileImage_.prototype.getGutterInternal = function() {\n  return 0;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getOpaque = function(projection) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION &&\n      this.getProjection() && projection &&\n      !_ol_proj_.equivalent(this.getProjection(), projection)) {\n    return false;\n  } else {\n    return _ol_source_UrlTile_.prototype.getOpaque.call(this, projection);\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getTileGridForProjection = function(projection) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.getTileGridForProjection.call(this, projection);\n  }\n  var thisProj = this.getProjection();\n  if (this.tileGrid &&\n      (!thisProj || _ol_proj_.equivalent(thisProj, projection))) {\n    return this.tileGrid;\n  } else {\n    var projKey = _ol_.getUid(projection).toString();\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n          _ol_tilegrid_.getForProjection(projection);\n    }\n    return /** @type {!ol.tilegrid.TileGrid} */ (this.tileGridForProjection[projKey]);\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getTileCacheForProjection = function(projection) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION) {\n    return _ol_source_UrlTile_.prototype.getTileCacheForProjection.call(this, projection);\n  }\n  var thisProj = this.getProjection();\n  if (!thisProj || _ol_proj_.equivalent(thisProj, projection)) {\n    return this.tileCache;\n  } else {\n    var projKey = _ol_.getUid(projection).toString();\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new _ol_TileCache_(this.tileCache.highWaterMark);\n    }\n    return this.tileCacheForProjection[projKey];\n  }\n};\n\n\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {string} key The key set on the tile.\n * @return {!ol.Tile} Tile.\n * @private\n */\n_ol_source_TileImage_.prototype.createTile_ = function(z, x, y, pixelRatio, projection, key) {\n  var tileCoord = [z, x, y];\n  var urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord, projection);\n  var tileUrl = urlTileCoord ?\n    this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n  var tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? _ol_TileState_.IDLE : _ol_TileState_.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions);\n  tile.key = key;\n  _ol_events_.listen(tile, _ol_events_EventType_.CHANGE,\n      this.handleTileChange, this);\n  return tile;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_source_TileImage_.prototype.getTile = function(z, x, y, pixelRatio, projection) {\n  var sourceProjection = /** @type {!ol.proj.Projection} */ (this.getProjection());\n  if (!_ol_.ENABLE_RASTER_REPROJECTION ||\n      !sourceProjection || !projection ||\n      _ol_proj_.equivalent(sourceProjection, projection)) {\n    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n  } else {\n    var cache = this.getTileCacheForProjection(projection);\n    var tileCoord = [z, x, y];\n    var tile;\n    var tileCoordKey = _ol_tilecoord_.getKey(tileCoord);\n    if (cache.containsKey(tileCoordKey)) {\n      tile = /** @type {!ol.Tile} */ (cache.get(tileCoordKey));\n    }\n    var key = this.getKey();\n    if (tile && tile.key == key) {\n      return tile;\n    } else {\n      var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n      var targetTileGrid = this.getTileGridForProjection(projection);\n      var wrappedTileCoord =\n          this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var newTile = new _ol_reproj_Tile_(\n          sourceProjection, sourceTileGrid,\n          projection, targetTileGrid,\n          tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),\n          this.getGutterInternal(),\n          function(z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this), this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_);\n      newTile.key = key;\n\n      if (tile) {\n        newTile.interimTile = tile;\n        newTile.refreshInterimChain();\n        cache.replace(tileCoordKey, newTile);\n      } else {\n        cache.set(tileCoordKey, newTile);\n      }\n      return newTile;\n    }\n  }\n};\n\n\n/**\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {number} pixelRatio Pixel ratio.\n * @param {!ol.proj.Projection} projection Projection.\n * @return {!ol.Tile} Tile.\n * @protected\n */\n_ol_source_TileImage_.prototype.getTileInternal = function(z, x, y, pixelRatio, projection) {\n  var tile = null;\n  var tileCoordKey = _ol_tilecoord_.getKeyZXY(z, x, y);\n  var key = this.getKey();\n  if (!this.tileCache.containsKey(tileCoordKey)) {\n    tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n    this.tileCache.set(tileCoordKey, tile);\n  } else {\n    tile = this.tileCache.get(tileCoordKey);\n    if (tile.key != key) {\n      // The source's params changed. If the tile has an interim tile and if we\n      // can use it then we use it. Otherwise we create a new tile.  In both\n      // cases we attempt to assign an interim tile to the new tile.\n      var interimTile = tile;\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n      //make the new tile the head of the list,\n      if (interimTile.getState() == _ol_TileState_.IDLE) {\n        //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n        tile.interimTile = interimTile.interimTile;\n      } else {\n        tile.interimTile = interimTile;\n      }\n      tile.refreshInterimChain();\n      this.tileCache.replace(tileCoordKey, tile);\n    }\n  }\n  return tile;\n};\n\n\n/**\n * Sets whether to render reprojection edges or not (usually for debugging).\n * @param {boolean} render Render the edges.\n * @api\n */\n_ol_source_TileImage_.prototype.setRenderReprojectionEdges = function(render) {\n  if (!_ol_.ENABLE_RASTER_REPROJECTION ||\n      this.renderReprojectionEdges_ == render) {\n    return;\n  }\n  this.renderReprojectionEdges_ = render;\n  for (var id in this.tileCacheForProjection) {\n    this.tileCacheForProjection[id].clear();\n  }\n  this.changed();\n};\n\n\n/**\n * Sets the tile grid to use when reprojecting the tiles to the given\n * projection instead of the default tile grid for the projection.\n *\n * This can be useful when the default tile grid cannot be created\n * (e.g. projection has no extent defined) or\n * for optimization reasons (custom tile size, resolutions, ...).\n *\n * @param {ol.ProjectionLike} projection Projection.\n * @param {ol.tilegrid.TileGrid} tilegrid Tile grid to use for the projection.\n * @api\n */\n_ol_source_TileImage_.prototype.setTileGridForProjection = function(projection, tilegrid) {\n  if (_ol_.ENABLE_RASTER_REPROJECTION) {\n    var proj = _ol_proj_.get(projection);\n    if (proj) {\n      var projKey = _ol_.getUid(proj).toString();\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n};\n\n\n/**\n * @param {ol.ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n_ol_source_TileImage_.defaultTileLoadFunction = function(imageTile, src) {\n  imageTile.getImage().src = src;\n};\nexport default _ol_source_TileImage_;\n","/**\n * @enum {string}\n */\nvar _ol_layer_TileProperty_ = {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'\n};\n\nexport default _ol_layer_TileProperty_;\n","import _ol_ from '../index.js';\nimport _ol_LayerType_ from '../layertype.js';\nimport _ol_layer_Layer_ from '../layer/layer.js';\nimport _ol_layer_TileProperty_ from '../layer/tileproperty.js';\nimport _ol_obj_ from '../obj.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link ol.Object}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @constructor\n * @extends {ol.layer.Layer}\n * @fires ol.render.Event\n * @param {olx.layer.TileOptions=} opt_options Tile layer options.\n * @api\n */\nvar _ol_layer_Tile_ = function(opt_options) {\n  var options = opt_options ? opt_options : {};\n\n  var baseOptions = _ol_obj_.assign({}, options);\n\n  delete baseOptions.preload;\n  delete baseOptions.useInterimTilesOnError;\n  _ol_layer_Layer_.call(this,  /** @type {olx.layer.LayerOptions} */ (baseOptions));\n\n  this.setPreload(options.preload !== undefined ? options.preload : 0);\n  this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?\n    options.useInterimTilesOnError : true);\n\n  /**\n   * The layer type.\n   * @protected\n   * @type {ol.LayerType}\n   */\n  this.type = _ol_LayerType_.TILE;\n\n};\n\n_ol_.inherits(_ol_layer_Tile_, _ol_layer_Layer_);\n\n\n/**\n * Return the level as number to which we will preload tiles up to.\n * @return {number} The level to preload tiles up to.\n * @observable\n * @api\n */\n_ol_layer_Tile_.prototype.getPreload = function() {\n  return (\n  /** @type {number} */ this.get(_ol_layer_TileProperty_.PRELOAD)\n  );\n};\n\n\n/**\n * Return the associated {@link ol.source.Tile tilesource} of the layer.\n * @function\n * @return {ol.source.Tile} Source.\n * @api\n */\n_ol_layer_Tile_.prototype.getSource;\n\n\n/**\n * Set the level as number to which we will preload tiles up to.\n * @param {number} preload The level to preload tiles up to.\n * @observable\n * @api\n */\n_ol_layer_Tile_.prototype.setPreload = function(preload) {\n  this.set(_ol_layer_TileProperty_.PRELOAD, preload);\n};\n\n\n/**\n * Whether we use interim tiles on error.\n * @return {boolean} Use interim tiles on error.\n * @observable\n * @api\n */\n_ol_layer_Tile_.prototype.getUseInterimTilesOnError = function() {\n  return (\n  /** @type {boolean} */ this.get(_ol_layer_TileProperty_.USE_INTERIM_TILES_ON_ERROR)\n  );\n};\n\n\n/**\n * Set whether we use interim tiles on error.\n * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n * @observable\n * @api\n */\n_ol_layer_Tile_.prototype.setUseInterimTilesOnError = function(useInterimTilesOnError) {\n  this.set(\n      _ol_layer_TileProperty_.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n};\nexport default _ol_layer_Tile_;\n","import _ol_asserts_ from './asserts.js';\nimport _ol_math_ from './math.js';\nimport _ol_tilecoord_ from './tilecoord.js';\nvar _ol_TileUrlFunction_ = {};\n\n\n/**\n * @param {string} template Template.\n * @param {ol.tilegrid.TileGrid} tileGrid Tile grid.\n * @return {ol.TileUrlFunctionType} Tile URL function.\n */\n_ol_TileUrlFunction_.createFromTemplate = function(template, tileGrid) {\n  var zRegEx = /\\{z\\}/g;\n  var xRegEx = /\\{x\\}/g;\n  var yRegEx = /\\{y\\}/g;\n  var dashYRegEx = /\\{-y\\}/g;\n  return (\n    /**\n     * @param {ol.TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {ol.proj.Projection} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function(tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      } else {\n        return template.replace(zRegEx, tileCoord[0].toString())\n            .replace(xRegEx, tileCoord[1].toString())\n            .replace(yRegEx, function() {\n              var y = -tileCoord[2] - 1;\n              return y.toString();\n            })\n            .replace(dashYRegEx, function() {\n              var z = tileCoord[0];\n              var range = tileGrid.getFullTileRange(z);\n              _ol_asserts_.assert(range, 55); // The {-y} placeholder requires a tile grid with extent\n              var y = range.getHeight() + tileCoord[2];\n              return y.toString();\n            });\n      }\n    }\n  );\n};\n\n\n/**\n * @param {Array.<string>} templates Templates.\n * @param {ol.tilegrid.TileGrid} tileGrid Tile grid.\n * @return {ol.TileUrlFunctionType} Tile URL function.\n */\n_ol_TileUrlFunction_.createFromTemplates = function(templates, tileGrid) {\n  var len = templates.length;\n  var tileUrlFunctions = new Array(len);\n  for (var i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = _ol_TileUrlFunction_.createFromTemplate(\n        templates[i], tileGrid);\n  }\n  return _ol_TileUrlFunction_.createFromTileUrlFunctions(tileUrlFunctions);\n};\n\n\n/**\n * @param {Array.<ol.TileUrlFunctionType>} tileUrlFunctions Tile URL Functions.\n * @return {ol.TileUrlFunctionType} Tile URL function.\n */\n_ol_TileUrlFunction_.createFromTileUrlFunctions = function(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\n     * @param {ol.TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {ol.proj.Projection} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function(tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      } else {\n        var h = _ol_tilecoord_.hash(tileCoord);\n        var index = _ol_math_.modulo(h, tileUrlFunctions.length);\n        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n      }\n    }\n  );\n};\n\n\n/**\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @return {string|undefined} Tile URL.\n */\n_ol_TileUrlFunction_.nullTileUrlFunction = function(tileCoord, pixelRatio, projection) {\n  return undefined;\n};\n\n\n/**\n * @param {string} url URL.\n * @return {Array.<string>} Array of urls.\n */\n_ol_TileUrlFunction_.expandUrl = function(url) {\n  var urls = [];\n  var match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    var startCharCode = match[1].charCodeAt(0);\n    var stopCharCode = match[2].charCodeAt(0);\n    var charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    var stop = parseInt(match[2], 10);\n    for (var i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n};\nexport default _ol_TileUrlFunction_;\n"],"sourceRoot":""}