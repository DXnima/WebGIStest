{"version":3,"sources":["webpack:///./node_modules/ol/interaction/modifyeventtype.js","webpack:///./node_modules/ol/interaction/modify.js"],"names":["_ol_interaction_ModifyEventType_","MODIFYSTART","MODIFYEND","_ol_interaction_Modify_","options","features","call","this","handleDownEvent","handleDownEvent_","handleDragEvent","handleDragEvent_","handleEvent","handleUpEvent","handleUpEvent_","condition_","condition","primaryAction","defaultDeleteCondition_","mapBrowserEvent","altKeyOnly","singleClick","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","always","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","modified_","rBush_","pixelTolerance_","undefined","pixelTolerance","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","getFeatures","listen","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","features_","forEach","addFeature_","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","inherits","MODIFY_SEGMENT_CIRCLE_CENTER_INDEX","MODIFY_SEGMENT_CIRCLE_CIRCUMFERENCE_INDEX","prototype","feature","geometry","getGeometry","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","handleFeatureChange_","willModifyFeatures_","evt","dispatchEvent","Event","removeFeature_","removeFeatureSegmentData_","getLength","getSource","removeFeature","unlisten","rBush","nodesToRemove","node","push","i","length","remove","setActive","active","setMap","event","coordinates","getCoordinates","segmentData","segment","insert","getExtent","ii","points","depth","index","slice","boundingExtent","j","jj","lines","rings","k","kk","polygons","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","createOrUpdateFromCoordinate","geometries","getGeometriesArray","createOrUpdateVertexFeature_","vertexFeature","setCoordinates","addFeature","compareIndexes_","a","b","pixel","pixelCoordinate","getCoordinateFromPixel","insertVertices","vertex","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","segmentDataMatch","uid","getUid","join","Array","CIRCLE","closestVertex","closestOnSegmentData_","equals","LINE_STRING","MULTI_LINE_STRING","insertVertex_","apply","coordinate","dragSegment","getStride","POINT","MULTI_POINT","POLYGON","MULTI_POLYGON","setCenter","setRadius","distance","setGeometryCoordinates_","update","getView","getInteracting","type","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","handled","SINGLECLICK","removePoint","sortByDistance","pointDistanceToSegmentDataSquared_","box","buffer","getResolution","nodes","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDistance","squaredDist2","Math","sqrt","min","pointCoordinates","circleGeometry","distanceToCenterSquared","distanceToCircumference","getRadius","squaredDistanceToSegment","getClosestPoint","closestOnSegment","splice","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removeVertex_","component","left","newIndex","right","dragSegments","segmentsByFeature","deleted","pop","segments","delta","forEachInExtent","createDefaultEditing","resolution","mapBrowserPointerEvent"],"mappings":"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","file":"js/chunk-2d0e93f2.a12eb13b.js","sourcesContent":["/**\n * @enum {string}\n */\nvar _ol_interaction_ModifyEventType_ = {\n  /**\n   * Triggered upon feature modification start\n   * @event ol.interaction.Modify.Event#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ol.interaction.Modify.Event#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\nexport default _ol_interaction_ModifyEventType_;\n","import _ol_ from '../index.js';\nimport _ol_Collection_ from '../collection.js';\nimport _ol_CollectionEventType_ from '../collectioneventtype.js';\nimport _ol_Feature_ from '../feature.js';\nimport _ol_MapBrowserEventType_ from '../mapbrowsereventtype.js';\nimport _ol_MapBrowserPointerEvent_ from '../mapbrowserpointerevent.js';\nimport _ol_array_ from '../array.js';\nimport _ol_coordinate_ from '../coordinate.js';\nimport _ol_events_ from '../events.js';\nimport _ol_events_Event_ from '../events/event.js';\nimport _ol_events_EventType_ from '../events/eventtype.js';\nimport _ol_events_condition_ from '../events/condition.js';\nimport _ol_extent_ from '../extent.js';\nimport _ol_geom_GeometryType_ from '../geom/geometrytype.js';\nimport _ol_geom_Point_ from '../geom/point.js';\nimport _ol_interaction_ModifyEventType_ from '../interaction/modifyeventtype.js';\nimport _ol_interaction_Pointer_ from '../interaction/pointer.js';\nimport _ol_layer_Vector_ from '../layer/vector.js';\nimport _ol_source_Vector_ from '../source/vector.js';\nimport _ol_source_VectorEventType_ from '../source/vectoreventtype.js';\nimport _ol_structs_RBush_ from '../structs/rbush.js';\nimport _ol_style_Style_ from '../style/style.js';\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n *\n * @constructor\n * @extends {ol.interaction.Pointer}\n * @param {olx.interaction.ModifyOptions} options Options.\n * @fires ol.interaction.Modify.Event\n * @api\n */\nvar _ol_interaction_Modify_ = function(options) {\n\n  _ol_interaction_Pointer_.call(this, {\n    handleDownEvent: _ol_interaction_Modify_.handleDownEvent_,\n    handleDragEvent: _ol_interaction_Modify_.handleDragEvent_,\n    handleEvent: _ol_interaction_Modify_.handleEvent,\n    handleUpEvent: _ol_interaction_Modify_.handleUpEvent_\n  });\n\n  /**\n   * @private\n   * @type {ol.EventsConditionType}\n   */\n  this.condition_ = options.condition ?\n    options.condition : _ol_events_condition_.primaryAction;\n\n\n  /**\n   * @private\n   * @param {ol.MapBrowserEvent} mapBrowserEvent Browser event.\n   * @return {boolean} Combined condition result.\n   */\n  this.defaultDeleteCondition_ = function(mapBrowserEvent) {\n    return _ol_events_condition_.altKeyOnly(mapBrowserEvent) &&\n      _ol_events_condition_.singleClick(mapBrowserEvent);\n  };\n\n  /**\n   * @type {ol.EventsConditionType}\n   * @private\n   */\n  this.deleteCondition_ = options.deleteCondition ?\n    options.deleteCondition : this.defaultDeleteCondition_;\n\n  /**\n   * @type {ol.EventsConditionType}\n   * @private\n   */\n  this.insertVertexCondition_ = options.insertVertexCondition ?\n    options.insertVertexCondition : _ol_events_condition_.always;\n\n  /**\n   * Editing vertex.\n   * @type {ol.Feature}\n   * @private\n   */\n  this.vertexFeature_ = null;\n\n  /**\n   * Segments intersecting {@link this.vertexFeature_} by segment uid.\n   * @type {Object.<string, boolean>}\n   * @private\n   */\n  this.vertexSegments_ = null;\n\n  /**\n   * @type {ol.Pixel}\n   * @private\n   */\n  this.lastPixel_ = [0, 0];\n\n  /**\n   * Tracks if the next `singleclick` event should be ignored to prevent\n   * accidental deletion right after vertex creation.\n   * @type {boolean}\n   * @private\n   */\n  this.ignoreNextSingleClick_ = false;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.modified_ = false;\n\n  /**\n   * Segment RTree for each layer\n   * @type {ol.structs.RBush.<ol.ModifySegmentDataType>}\n   * @private\n   */\n  this.rBush_ = new _ol_structs_RBush_();\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n    options.pixelTolerance : 10;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.snappedToVertex_ = false;\n\n  /**\n   * Indicate whether the interaction is currently changing a feature's\n   * coordinates.\n   * @type {boolean}\n   * @private\n   */\n  this.changingFeature_ = false;\n\n  /**\n   * @type {Array}\n   * @private\n   */\n  this.dragSegments_ = [];\n\n  /**\n   * Draw overlay where sketch features are drawn.\n   * @type {ol.layer.Vector}\n   * @private\n   */\n  this.overlay_ = new _ol_layer_Vector_({\n    source: new _ol_source_Vector_({\n      useSpatialIndex: false,\n      wrapX: !!options.wrapX\n    }),\n    style: options.style ? options.style :\n      _ol_interaction_Modify_.getDefaultStyleFunction(),\n    updateWhileAnimating: true,\n    updateWhileInteracting: true\n  });\n\n  /**\n  * @const\n  * @private\n  * @type {Object.<string, function(ol.Feature, ol.geom.Geometry)>}\n  */\n  this.SEGMENT_WRITERS_ = {\n    'Point': this.writePointGeometry_,\n    'LineString': this.writeLineStringGeometry_,\n    'LinearRing': this.writeLineStringGeometry_,\n    'Polygon': this.writePolygonGeometry_,\n    'MultiPoint': this.writeMultiPointGeometry_,\n    'MultiLineString': this.writeMultiLineStringGeometry_,\n    'MultiPolygon': this.writeMultiPolygonGeometry_,\n    'Circle': this.writeCircleGeometry_,\n    'GeometryCollection': this.writeGeometryCollectionGeometry_\n  };\n\n\n  /**\n   * @type {ol.source.Vector}\n   * @private\n   */\n  this.source_ = null;\n\n  var features;\n  if (options.source) {\n    this.source_ = options.source;\n    features = new _ol_Collection_(this.source_.getFeatures());\n    _ol_events_.listen(this.source_, _ol_source_VectorEventType_.ADDFEATURE,\n        this.handleSourceAdd_, this);\n    _ol_events_.listen(this.source_, _ol_source_VectorEventType_.REMOVEFEATURE,\n        this.handleSourceRemove_, this);\n  } else {\n    features = options.features;\n  }\n  if (!features) {\n    throw new Error('The modify interaction requires features or a source');\n  }\n\n  /**\n   * @type {ol.Collection.<ol.Feature>}\n   * @private\n   */\n  this.features_ = features;\n\n  this.features_.forEach(this.addFeature_, this);\n  _ol_events_.listen(this.features_, _ol_CollectionEventType_.ADD,\n      this.handleFeatureAdd_, this);\n  _ol_events_.listen(this.features_, _ol_CollectionEventType_.REMOVE,\n      this.handleFeatureRemove_, this);\n\n  /**\n   * @type {ol.MapBrowserPointerEvent}\n   * @private\n   */\n  this.lastPointerEvent_ = null;\n\n};\n\n_ol_.inherits(_ol_interaction_Modify_, _ol_interaction_Pointer_);\n\n\n/**\n * @define {number} The segment index assigned to a circle's center when\n * breaking up a cicrle into ModifySegmentDataType segments.\n */\n_ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CENTER_INDEX = 0;\n\n/**\n * @define {number} The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n */\n_ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\n\n/**\n * @param {ol.Feature} feature Feature.\n * @private\n */\n_ol_interaction_Modify_.prototype.addFeature_ = function(feature) {\n  var geometry = feature.getGeometry();\n  if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n    this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n  }\n  var map = this.getMap();\n  if (map && map.isRendered() && this.getActive()) {\n    this.handlePointerAtPixel_(this.lastPixel_, map);\n  }\n  _ol_events_.listen(feature, _ol_events_EventType_.CHANGE,\n      this.handleFeatureChange_, this);\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} evt Map browser event\n * @private\n */\n_ol_interaction_Modify_.prototype.willModifyFeatures_ = function(evt) {\n  if (!this.modified_) {\n    this.modified_ = true;\n    this.dispatchEvent(new _ol_interaction_Modify_.Event(\n        _ol_interaction_ModifyEventType_.MODIFYSTART, this.features_, evt));\n  }\n};\n\n\n/**\n * @param {ol.Feature} feature Feature.\n * @private\n */\n_ol_interaction_Modify_.prototype.removeFeature_ = function(feature) {\n  this.removeFeatureSegmentData_(feature);\n  // Remove the vertex feature if the collection of canditate features\n  // is empty.\n  if (this.vertexFeature_ && this.features_.getLength() === 0) {\n    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n    this.vertexFeature_ = null;\n  }\n  _ol_events_.unlisten(feature, _ol_events_EventType_.CHANGE,\n      this.handleFeatureChange_, this);\n};\n\n\n/**\n * @param {ol.Feature} feature Feature.\n * @private\n */\n_ol_interaction_Modify_.prototype.removeFeatureSegmentData_ = function(feature) {\n  var rBush = this.rBush_;\n  var /** @type {Array.<ol.ModifySegmentDataType>} */ nodesToRemove = [];\n  rBush.forEach(\n      /**\n       * @param {ol.ModifySegmentDataType} node RTree node.\n       */\n      function(node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      });\n  for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n    rBush.remove(nodesToRemove[i]);\n  }\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_interaction_Modify_.prototype.setActive = function(active) {\n  if (this.vertexFeature_ && !active) {\n    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n    this.vertexFeature_ = null;\n  }\n  _ol_interaction_Pointer_.prototype.setActive.call(this, active);\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_interaction_Modify_.prototype.setMap = function(map) {\n  this.overlay_.setMap(map);\n  _ol_interaction_Pointer_.prototype.setMap.call(this, map);\n};\n\n\n/**\n * @param {ol.source.Vector.Event} event Event.\n * @private\n */\n_ol_interaction_Modify_.prototype.handleSourceAdd_ = function(event) {\n  if (event.feature) {\n    this.features_.push(event.feature);\n  }\n};\n\n\n/**\n * @param {ol.source.Vector.Event} event Event.\n * @private\n */\n_ol_interaction_Modify_.prototype.handleSourceRemove_ = function(event) {\n  if (event.feature) {\n    this.features_.remove(event.feature);\n  }\n};\n\n\n/**\n * @param {ol.Collection.Event} evt Event.\n * @private\n */\n_ol_interaction_Modify_.prototype.handleFeatureAdd_ = function(evt) {\n  this.addFeature_(/** @type {ol.Feature} */ (evt.element));\n};\n\n\n/**\n * @param {ol.events.Event} evt Event.\n * @private\n */\n_ol_interaction_Modify_.prototype.handleFeatureChange_ = function(evt) {\n  if (!this.changingFeature_) {\n    var feature = /** @type {ol.Feature} */ (evt.target);\n    this.removeFeature_(feature);\n    this.addFeature_(feature);\n  }\n};\n\n\n/**\n * @param {ol.Collection.Event} evt Event.\n * @private\n */\n_ol_interaction_Modify_.prototype.handleFeatureRemove_ = function(evt) {\n  var feature = /** @type {ol.Feature} */ (evt.element);\n  this.removeFeature_(feature);\n};\n\n\n/**\n * @param {ol.Feature} feature Feature\n * @param {ol.geom.Point} geometry Geometry.\n * @private\n */\n_ol_interaction_Modify_.prototype.writePointGeometry_ = function(feature, geometry) {\n  var coordinates = geometry.getCoordinates();\n  var segmentData = /** @type {ol.ModifySegmentDataType} */ ({\n    feature: feature,\n    geometry: geometry,\n    segment: [coordinates, coordinates]\n  });\n  this.rBush_.insert(geometry.getExtent(), segmentData);\n};\n\n\n/**\n * @param {ol.Feature} feature Feature\n * @param {ol.geom.MultiPoint} geometry Geometry.\n * @private\n */\n_ol_interaction_Modify_.prototype.writeMultiPointGeometry_ = function(feature, geometry) {\n  var points = geometry.getCoordinates();\n  var coordinates, i, ii, segmentData;\n  for (i = 0, ii = points.length; i < ii; ++i) {\n    coordinates = points[i];\n    segmentData = /** @type {ol.ModifySegmentDataType} */ ({\n      feature: feature,\n      geometry: geometry,\n      depth: [i],\n      index: i,\n      segment: [coordinates, coordinates]\n    });\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n};\n\n\n/**\n * @param {ol.Feature} feature Feature\n * @param {ol.geom.LineString} geometry Geometry.\n * @private\n */\n_ol_interaction_Modify_.prototype.writeLineStringGeometry_ = function(feature, geometry) {\n  var coordinates = geometry.getCoordinates();\n  var i, ii, segment, segmentData;\n  for (i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n    segment = coordinates.slice(i, i + 2);\n    segmentData = /** @type {ol.ModifySegmentDataType} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: i,\n      segment: segment\n    });\n    this.rBush_.insert(_ol_extent_.boundingExtent(segment), segmentData);\n  }\n};\n\n\n/**\n * @param {ol.Feature} feature Feature\n * @param {ol.geom.MultiLineString} geometry Geometry.\n * @private\n */\n_ol_interaction_Modify_.prototype.writeMultiLineStringGeometry_ = function(feature, geometry) {\n  var lines = geometry.getCoordinates();\n  var coordinates, i, ii, j, jj, segment, segmentData;\n  for (j = 0, jj = lines.length; j < jj; ++j) {\n    coordinates = lines[j];\n    for (i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      segment = coordinates.slice(i, i + 2);\n      segmentData = /** @type {ol.ModifySegmentDataType} */ ({\n        feature: feature,\n        geometry: geometry,\n        depth: [j],\n        index: i,\n        segment: segment\n      });\n      this.rBush_.insert(_ol_extent_.boundingExtent(segment), segmentData);\n    }\n  }\n};\n\n\n/**\n * @param {ol.Feature} feature Feature\n * @param {ol.geom.Polygon} geometry Geometry.\n * @private\n */\n_ol_interaction_Modify_.prototype.writePolygonGeometry_ = function(feature, geometry) {\n  var rings = geometry.getCoordinates();\n  var coordinates, i, ii, j, jj, segment, segmentData;\n  for (j = 0, jj = rings.length; j < jj; ++j) {\n    coordinates = rings[j];\n    for (i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      segment = coordinates.slice(i, i + 2);\n      segmentData = /** @type {ol.ModifySegmentDataType} */ ({\n        feature: feature,\n        geometry: geometry,\n        depth: [j],\n        index: i,\n        segment: segment\n      });\n      this.rBush_.insert(_ol_extent_.boundingExtent(segment), segmentData);\n    }\n  }\n};\n\n\n/**\n * @param {ol.Feature} feature Feature\n * @param {ol.geom.MultiPolygon} geometry Geometry.\n * @private\n */\n_ol_interaction_Modify_.prototype.writeMultiPolygonGeometry_ = function(feature, geometry) {\n  var polygons = geometry.getCoordinates();\n  var coordinates, i, ii, j, jj, k, kk, rings, segment, segmentData;\n  for (k = 0, kk = polygons.length; k < kk; ++k) {\n    rings = polygons[k];\n    for (j = 0, jj = rings.length; j < jj; ++j) {\n      coordinates = rings[j];\n      for (i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        segment = coordinates.slice(i, i + 2);\n        segmentData = /** @type {ol.ModifySegmentDataType} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j, k],\n          index: i,\n          segment: segment\n        });\n        this.rBush_.insert(_ol_extent_.boundingExtent(segment), segmentData);\n      }\n    }\n  }\n};\n\n\n/**\n * We convert a circle into two segments.  The segment at index\n * {@link ol.interaction.Modify.MODIFY_SEGMENT_CIRCLE_CENTER_INDEX} is the\n * circle's center (a point).  The segment at index\n * {@link ol.interaction.Modify.MODIFY_SEGMENT_CIRCLE_CIRCUMFERENCE_INDEX} is\n * the circumference, and is not a line segment.\n *\n * @param {ol.Feature} feature Feature.\n * @param {ol.geom.Circle} geometry Geometry.\n * @private\n */\n_ol_interaction_Modify_.prototype.writeCircleGeometry_ = function(feature, geometry) {\n  var coordinates = geometry.getCenter();\n  var centerSegmentData = /** @type {ol.ModifySegmentDataType} */ ({\n    feature: feature,\n    geometry: geometry,\n    index: _ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CENTER_INDEX,\n    segment: [coordinates, coordinates]\n  });\n  var circumferenceSegmentData = /** @type {ol.ModifySegmentDataType} */ ({\n    feature: feature,\n    geometry: geometry,\n    index: _ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CIRCUMFERENCE_INDEX,\n    segment: [coordinates, coordinates]\n  });\n  var featureSegments = [centerSegmentData, circumferenceSegmentData];\n  centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n  this.rBush_.insert(_ol_extent_.createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n  this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n};\n\n\n/**\n * @param {ol.Feature} feature Feature\n * @param {ol.geom.GeometryCollection} geometry Geometry.\n * @private\n */\n_ol_interaction_Modify_.prototype.writeGeometryCollectionGeometry_ = function(feature, geometry) {\n  var i, geometries = geometry.getGeometriesArray();\n  for (i = 0; i < geometries.length; ++i) {\n    this.SEGMENT_WRITERS_[geometries[i].getType()].call(\n        this, feature, geometries[i]);\n  }\n};\n\n\n/**\n * @param {ol.Coordinate} coordinates Coordinates.\n * @return {ol.Feature} Vertex feature.\n * @private\n */\n_ol_interaction_Modify_.prototype.createOrUpdateVertexFeature_ = function(coordinates) {\n  var vertexFeature = this.vertexFeature_;\n  if (!vertexFeature) {\n    vertexFeature = new _ol_Feature_(new _ol_geom_Point_(coordinates));\n    this.vertexFeature_ = vertexFeature;\n    this.overlay_.getSource().addFeature(vertexFeature);\n  } else {\n    var geometry = /** @type {ol.geom.Point} */ (vertexFeature.getGeometry());\n    geometry.setCoordinates(coordinates);\n  }\n  return vertexFeature;\n};\n\n\n/**\n * @param {ol.ModifySegmentDataType} a The first segment data.\n * @param {ol.ModifySegmentDataType} b The second segment data.\n * @return {number} The difference in indexes.\n * @private\n */\n_ol_interaction_Modify_.compareIndexes_ = function(a, b) {\n  return a.index - b.index;\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} evt Event.\n * @return {boolean} Start drag sequence?\n * @this {ol.interaction.Modify}\n * @private\n */\n_ol_interaction_Modify_.handleDownEvent_ = function(evt) {\n  if (!this.condition_(evt)) {\n    return false;\n  }\n  this.handlePointerAtPixel_(evt.pixel, evt.map);\n  var pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n  this.dragSegments_.length = 0;\n  this.modified_ = false;\n  var vertexFeature = this.vertexFeature_;\n  if (vertexFeature) {\n    var insertVertices = [];\n    var geometry = /** @type {ol.geom.Point} */ (vertexFeature.getGeometry());\n    var vertex = geometry.getCoordinates();\n    var vertexExtent = _ol_extent_.boundingExtent([vertex]);\n    var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n    var componentSegments = {};\n    segmentDataMatches.sort(_ol_interaction_Modify_.compareIndexes_);\n    for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n      var segmentDataMatch = segmentDataMatches[i];\n      var segment = segmentDataMatch.segment;\n      var uid = _ol_.getUid(segmentDataMatch.feature);\n      var depth = segmentDataMatch.depth;\n      if (depth) {\n        uid += '-' + depth.join('-'); // separate feature components\n      }\n      if (!componentSegments[uid]) {\n        componentSegments[uid] = new Array(2);\n      }\n      if (segmentDataMatch.geometry.getType() === _ol_geom_GeometryType_.CIRCLE &&\n      segmentDataMatch.index === _ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CIRCUMFERENCE_INDEX) {\n\n        var closestVertex = _ol_interaction_Modify_.closestOnSegmentData_(pixelCoordinate, segmentDataMatch);\n        if (_ol_coordinate_.equals(closestVertex, vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        }\n      } else if (_ol_coordinate_.equals(segment[0], vertex) &&\n          !componentSegments[uid][0]) {\n        this.dragSegments_.push([segmentDataMatch, 0]);\n        componentSegments[uid][0] = segmentDataMatch;\n      } else if (_ol_coordinate_.equals(segment[1], vertex) &&\n          !componentSegments[uid][1]) {\n\n        // prevent dragging closed linestrings by the connecting node\n        if ((segmentDataMatch.geometry.getType() ===\n            _ol_geom_GeometryType_.LINE_STRING ||\n            segmentDataMatch.geometry.getType() ===\n            _ol_geom_GeometryType_.MULTI_LINE_STRING) &&\n            componentSegments[uid][0] &&\n            componentSegments[uid][0].index === 0) {\n          continue;\n        }\n\n        this.dragSegments_.push([segmentDataMatch, 1]);\n        componentSegments[uid][1] = segmentDataMatch;\n      } else if (this.insertVertexCondition_(evt) && _ol_.getUid(segment) in this.vertexSegments_ &&\n          (!componentSegments[uid][0] && !componentSegments[uid][1])) {\n        insertVertices.push([segmentDataMatch, vertex]);\n      }\n    }\n    if (insertVertices.length) {\n      this.willModifyFeatures_(evt);\n    }\n    for (var j = insertVertices.length - 1; j >= 0; --j) {\n      this.insertVertex_.apply(this, insertVertices[j]);\n    }\n  }\n  return !!this.vertexFeature_;\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} evt Event.\n * @this {ol.interaction.Modify}\n * @private\n */\n_ol_interaction_Modify_.handleDragEvent_ = function(evt) {\n  this.ignoreNextSingleClick_ = false;\n  this.willModifyFeatures_(evt);\n\n  var vertex = evt.coordinate;\n  for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n    var dragSegment = this.dragSegments_[i];\n    var segmentData = dragSegment[0];\n    var depth = segmentData.depth;\n    var geometry = segmentData.geometry;\n    var coordinates;\n    var segment = segmentData.segment;\n    var index = dragSegment[1];\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(segment[index][vertex.length]);\n    }\n\n    switch (geometry.getType()) {\n      case _ol_geom_GeometryType_.POINT:\n        coordinates = vertex;\n        segment[0] = segment[1] = vertex;\n        break;\n      case _ol_geom_GeometryType_.MULTI_POINT:\n        coordinates = geometry.getCoordinates();\n        coordinates[segmentData.index] = vertex;\n        segment[0] = segment[1] = vertex;\n        break;\n      case _ol_geom_GeometryType_.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n      case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n      case _ol_geom_GeometryType_.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n      case _ol_geom_GeometryType_.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n      case _ol_geom_GeometryType_.CIRCLE:\n        segment[0] = segment[1] = vertex;\n        if (segmentData.index === _ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CENTER_INDEX) {\n          this.changingFeature_ = true;\n          geometry.setCenter(vertex);\n          this.changingFeature_ = false;\n        } else { // We're dragging the circle's circumference:\n          this.changingFeature_ = true;\n          geometry.setRadius(_ol_coordinate_.distance(geometry.getCenter(), vertex));\n          this.changingFeature_ = false;\n        }\n        break;\n      default:\n        // pass\n    }\n\n    if (coordinates) {\n      this.setGeometryCoordinates_(geometry, coordinates);\n    }\n  }\n  this.createOrUpdateVertexFeature_(vertex);\n};\n\n\n/**\n * @param {ol.MapBrowserPointerEvent} evt Event.\n * @return {boolean} Stop drag sequence?\n * @this {ol.interaction.Modify}\n * @private\n */\n_ol_interaction_Modify_.handleUpEvent_ = function(evt) {\n  var segmentData;\n  var geometry;\n  for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n    segmentData = this.dragSegments_[i][0];\n    geometry = segmentData.geometry;\n    if (geometry.getType() === _ol_geom_GeometryType_.CIRCLE) {\n      // Update a circle object in the R* bush:\n      var coordinates = geometry.getCenter();\n      var centerSegmentData = segmentData.featureSegments[0];\n      var circumferenceSegmentData = segmentData.featureSegments[1];\n      centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n      circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n      this.rBush_.update(_ol_extent_.createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n      this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n    } else {\n      this.rBush_.update(_ol_extent_.boundingExtent(segmentData.segment),\n          segmentData);\n    }\n  }\n  if (this.modified_) {\n    this.dispatchEvent(new _ol_interaction_Modify_.Event(\n        _ol_interaction_ModifyEventType_.MODIFYEND, this.features_, evt));\n    this.modified_ = false;\n  }\n  return false;\n};\n\n\n/**\n * Handles the {@link ol.MapBrowserEvent map browser event} and may modify the\n * geometry.\n * @param {ol.MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {ol.interaction.Modify}\n * @api\n */\n_ol_interaction_Modify_.handleEvent = function(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof _ol_MapBrowserPointerEvent_)) {\n    return true;\n  }\n  this.lastPointerEvent_ = mapBrowserEvent;\n\n  var handled;\n  if (!mapBrowserEvent.map.getView().getInteracting() &&\n      mapBrowserEvent.type == _ol_MapBrowserEventType_.POINTERMOVE &&\n      !this.handlingDownUpSequence) {\n    this.handlePointerMove_(mapBrowserEvent);\n  }\n  if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n    if (mapBrowserEvent.type != _ol_MapBrowserEventType_.SINGLECLICK ||\n        !this.ignoreNextSingleClick_) {\n      handled = this.removePoint();\n    } else {\n      handled = true;\n    }\n  }\n\n  if (mapBrowserEvent.type == _ol_MapBrowserEventType_.SINGLECLICK) {\n    this.ignoreNextSingleClick_ = false;\n  }\n\n  return _ol_interaction_Pointer_.handleEvent.call(this, mapBrowserEvent) &&\n      !handled;\n};\n\n\n/**\n * @param {ol.MapBrowserEvent} evt Event.\n * @private\n */\n_ol_interaction_Modify_.prototype.handlePointerMove_ = function(evt) {\n  this.lastPixel_ = evt.pixel;\n  this.handlePointerAtPixel_(evt.pixel, evt.map);\n};\n\n\n/**\n * @param {ol.Pixel} pixel Pixel\n * @param {ol.PluggableMap} map Map.\n * @private\n */\n_ol_interaction_Modify_.prototype.handlePointerAtPixel_ = function(pixel, map) {\n  var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n  var sortByDistance = function(a, b) {\n    return _ol_interaction_Modify_.pointDistanceToSegmentDataSquared_(pixelCoordinate, a) -\n        _ol_interaction_Modify_.pointDistanceToSegmentDataSquared_(pixelCoordinate, b);\n  };\n\n  var box = _ol_extent_.buffer(\n      _ol_extent_.createOrUpdateFromCoordinate(pixelCoordinate),\n      map.getView().getResolution() * this.pixelTolerance_);\n\n  var rBush = this.rBush_;\n  var nodes = rBush.getInExtent(box);\n  if (nodes.length > 0) {\n    nodes.sort(sortByDistance);\n    var node = nodes[0];\n    var closestSegment = node.segment;\n    var vertex = _ol_interaction_Modify_.closestOnSegmentData_(pixelCoordinate, node);\n    var vertexPixel = map.getPixelFromCoordinate(vertex);\n    var dist = _ol_coordinate_.distance(pixel, vertexPixel);\n    if (dist <= this.pixelTolerance_) {\n      var vertexSegments = {};\n\n      if (node.geometry.getType() === _ol_geom_GeometryType_.CIRCLE &&\n      node.index === _ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CIRCUMFERENCE_INDEX) {\n\n        this.snappedToVertex_ = true;\n        this.createOrUpdateVertexFeature_(vertex);\n      } else {\n        var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n        var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n        var squaredDist1 = _ol_coordinate_.squaredDistance(vertexPixel, pixel1);\n        var squaredDist2 = _ol_coordinate_.squaredDistance(vertexPixel, pixel2);\n        dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ?\n            closestSegment[1] : closestSegment[0];\n        }\n        this.createOrUpdateVertexFeature_(vertex);\n        var segment;\n        for (var i = 1, ii = nodes.length; i < ii; ++i) {\n          segment = nodes[i].segment;\n          if ((_ol_coordinate_.equals(closestSegment[0], segment[0]) &&\n              _ol_coordinate_.equals(closestSegment[1], segment[1]) ||\n              (_ol_coordinate_.equals(closestSegment[0], segment[1]) &&\n              _ol_coordinate_.equals(closestSegment[1], segment[0])))) {\n            vertexSegments[_ol_.getUid(segment)] = true;\n          } else {\n            break;\n          }\n        }\n      }\n\n      vertexSegments[_ol_.getUid(closestSegment)] = true;\n      this.vertexSegments_ = vertexSegments;\n      return;\n    }\n  }\n  if (this.vertexFeature_) {\n    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n    this.vertexFeature_ = null;\n  }\n};\n\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {ol.Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {ol.ModifySegmentDataType} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\n_ol_interaction_Modify_.pointDistanceToSegmentDataSquared_ = function(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === _ol_geom_GeometryType_.CIRCLE) {\n    var circleGeometry = /** @type {ol.geom.Circle} */ (geometry);\n\n    if (segmentData.index === _ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CIRCUMFERENCE_INDEX) {\n      var distanceToCenterSquared =\n            _ol_coordinate_.squaredDistance(circleGeometry.getCenter(), pointCoordinates);\n      var distanceToCircumference =\n            Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  return _ol_coordinate_.squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n};\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {ol.Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {ol.ModifySegmentDataType} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {ol.Coordinate} The point closest to the specified line segment.\n */\n_ol_interaction_Modify_.closestOnSegmentData_ = function(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === _ol_geom_GeometryType_.CIRCLE &&\n  segmentData.index === _ol_interaction_Modify_.MODIFY_SEGMENT_CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n  return _ol_coordinate_.closestOnSegment(pointCoordinates, segmentData.segment);\n};\n\n\n/**\n * @param {ol.ModifySegmentDataType} segmentData Segment data.\n * @param {ol.Coordinate} vertex Vertex.\n * @private\n */\n_ol_interaction_Modify_.prototype.insertVertex_ = function(segmentData, vertex) {\n  var segment = segmentData.segment;\n  var feature = segmentData.feature;\n  var geometry = segmentData.geometry;\n  var depth = segmentData.depth;\n  var index = /** @type {number} */ (segmentData.index);\n  var coordinates;\n\n  while (vertex.length < geometry.getStride()) {\n    vertex.push(0);\n  }\n\n  switch (geometry.getType()) {\n    case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n      coordinates = geometry.getCoordinates();\n      coordinates[depth[0]].splice(index + 1, 0, vertex);\n      break;\n    case _ol_geom_GeometryType_.POLYGON:\n      coordinates = geometry.getCoordinates();\n      coordinates[depth[0]].splice(index + 1, 0, vertex);\n      break;\n    case _ol_geom_GeometryType_.MULTI_POLYGON:\n      coordinates = geometry.getCoordinates();\n      coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n      break;\n    case _ol_geom_GeometryType_.LINE_STRING:\n      coordinates = geometry.getCoordinates();\n      coordinates.splice(index + 1, 0, vertex);\n      break;\n    default:\n      return;\n  }\n\n  this.setGeometryCoordinates_(geometry, coordinates);\n  var rTree = this.rBush_;\n  rTree.remove(segmentData);\n  this.updateSegmentIndices_(geometry, index, depth, 1);\n  var newSegmentData = /** @type {ol.ModifySegmentDataType} */ ({\n    segment: [segment[0], vertex],\n    feature: feature,\n    geometry: geometry,\n    depth: depth,\n    index: index\n  });\n  rTree.insert(_ol_extent_.boundingExtent(newSegmentData.segment),\n      newSegmentData);\n  this.dragSegments_.push([newSegmentData, 1]);\n\n  var newSegmentData2 = /** @type {ol.ModifySegmentDataType} */ ({\n    segment: [vertex, segment[1]],\n    feature: feature,\n    geometry: geometry,\n    depth: depth,\n    index: index + 1\n  });\n  rTree.insert(_ol_extent_.boundingExtent(newSegmentData2.segment),\n      newSegmentData2);\n  this.dragSegments_.push([newSegmentData2, 0]);\n  this.ignoreNextSingleClick_ = true;\n};\n\n/**\n * Removes the vertex currently being pointed.\n * @return {boolean} True when a vertex was removed.\n * @api\n */\n_ol_interaction_Modify_.prototype.removePoint = function() {\n  if (this.lastPointerEvent_ && this.lastPointerEvent_.type != _ol_MapBrowserEventType_.POINTERDRAG) {\n    var evt = this.lastPointerEvent_;\n    this.willModifyFeatures_(evt);\n    this.removeVertex_();\n    this.dispatchEvent(new _ol_interaction_Modify_.Event(\n        _ol_interaction_ModifyEventType_.MODIFYEND, this.features_, evt));\n    this.modified_ = false;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Removes a vertex from all matching features.\n * @return {boolean} True when a vertex was removed.\n * @private\n */\n_ol_interaction_Modify_.prototype.removeVertex_ = function() {\n  var dragSegments = this.dragSegments_;\n  var segmentsByFeature = {};\n  var deleted = false;\n  var component, coordinates, dragSegment, geometry, i, index, left;\n  var newIndex, right, segmentData, uid;\n  for (i = dragSegments.length - 1; i >= 0; --i) {\n    dragSegment = dragSegments[i];\n    segmentData = dragSegment[0];\n    uid = _ol_.getUid(segmentData.feature);\n    if (segmentData.depth) {\n      // separate feature components\n      uid += '-' + segmentData.depth.join('-');\n    }\n    if (!(uid in segmentsByFeature)) {\n      segmentsByFeature[uid] = {};\n    }\n    if (dragSegment[1] === 0) {\n      segmentsByFeature[uid].right = segmentData;\n      segmentsByFeature[uid].index = segmentData.index;\n    } else if (dragSegment[1] == 1) {\n      segmentsByFeature[uid].left = segmentData;\n      segmentsByFeature[uid].index = segmentData.index + 1;\n    }\n\n  }\n  for (uid in segmentsByFeature) {\n    right = segmentsByFeature[uid].right;\n    left = segmentsByFeature[uid].left;\n    index = segmentsByFeature[uid].index;\n    newIndex = index - 1;\n    if (left !== undefined) {\n      segmentData = left;\n    } else {\n      segmentData = right;\n    }\n    if (newIndex < 0) {\n      newIndex = 0;\n    }\n    geometry = segmentData.geometry;\n    coordinates = geometry.getCoordinates();\n    component = coordinates;\n    deleted = false;\n    switch (geometry.getType()) {\n      case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n        if (coordinates[segmentData.depth[0]].length > 2) {\n          coordinates[segmentData.depth[0]].splice(index, 1);\n          deleted = true;\n        }\n        break;\n      case _ol_geom_GeometryType_.LINE_STRING:\n        if (coordinates.length > 2) {\n          coordinates.splice(index, 1);\n          deleted = true;\n        }\n        break;\n      case _ol_geom_GeometryType_.MULTI_POLYGON:\n        component = component[segmentData.depth[1]];\n        /* falls through */\n      case _ol_geom_GeometryType_.POLYGON:\n        component = component[segmentData.depth[0]];\n        if (component.length > 4) {\n          if (index == component.length - 1) {\n            index = 0;\n          }\n          component.splice(index, 1);\n          deleted = true;\n          if (index === 0) {\n            // close the ring again\n            component.pop();\n            component.push(component[0]);\n            newIndex = component.length - 1;\n          }\n        }\n        break;\n      default:\n        // pass\n    }\n\n    if (deleted) {\n      this.setGeometryCoordinates_(geometry, coordinates);\n      var segments = [];\n      if (left !== undefined) {\n        this.rBush_.remove(left);\n        segments.push(left.segment[0]);\n      }\n      if (right !== undefined) {\n        this.rBush_.remove(right);\n        segments.push(right.segment[1]);\n      }\n      if (left !== undefined && right !== undefined) {\n        var newSegmentData = /** @type {ol.ModifySegmentDataType} */ ({\n          depth: segmentData.depth,\n          feature: segmentData.feature,\n          geometry: segmentData.geometry,\n          index: newIndex,\n          segment: segments\n        });\n        this.rBush_.insert(_ol_extent_.boundingExtent(newSegmentData.segment),\n            newSegmentData);\n      }\n      this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n      if (this.vertexFeature_) {\n        this.overlay_.getSource().removeFeature(this.vertexFeature_);\n        this.vertexFeature_ = null;\n      }\n      dragSegments.length = 0;\n    }\n\n  }\n  return deleted;\n};\n\n\n/**\n * @param {ol.geom.SimpleGeometry} geometry Geometry.\n * @param {Array} coordinates Coordinates.\n * @private\n */\n_ol_interaction_Modify_.prototype.setGeometryCoordinates_ = function(geometry, coordinates) {\n  this.changingFeature_ = true;\n  geometry.setCoordinates(coordinates);\n  this.changingFeature_ = false;\n};\n\n\n/**\n * @param {ol.geom.SimpleGeometry} geometry Geometry.\n * @param {number} index Index.\n * @param {Array.<number>|undefined} depth Depth.\n * @param {number} delta Delta (1 or -1).\n * @private\n */\n_ol_interaction_Modify_.prototype.updateSegmentIndices_ = function(\n    geometry, index, depth, delta) {\n  this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {\n    if (segmentDataMatch.geometry === geometry &&\n        (depth === undefined || segmentDataMatch.depth === undefined ||\n        _ol_array_.equals(segmentDataMatch.depth, depth)) &&\n        segmentDataMatch.index > index) {\n      segmentDataMatch.index += delta;\n    }\n  });\n};\n\n\n/**\n * @return {ol.StyleFunction} Styles.\n */\n_ol_interaction_Modify_.getDefaultStyleFunction = function() {\n  var style = _ol_style_Style_.createDefaultEditing();\n  return function(feature, resolution) {\n    return style[_ol_geom_GeometryType_.POINT];\n  };\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link ol.interaction.Modify} instances are instances of\n * this type.\n *\n * @constructor\n * @extends {ol.events.Event}\n * @implements {oli.ModifyEvent}\n * @param {ol.interaction.ModifyEventType} type Type.\n * @param {ol.Collection.<ol.Feature>} features The features modified.\n * @param {ol.MapBrowserPointerEvent} mapBrowserPointerEvent Associated\n *     {@link ol.MapBrowserPointerEvent}.\n */\n_ol_interaction_Modify_.Event = function(type, features, mapBrowserPointerEvent) {\n\n  _ol_events_Event_.call(this, type);\n\n  /**\n   * The features being modified.\n   * @type {ol.Collection.<ol.Feature>}\n   * @api\n   */\n  this.features = features;\n\n  /**\n   * Associated {@link ol.MapBrowserEvent}.\n   * @type {ol.MapBrowserEvent}\n   * @api\n   */\n  this.mapBrowserEvent = mapBrowserPointerEvent;\n};\n_ol_.inherits(_ol_interaction_Modify_.Event, _ol_events_Event_);\nexport default _ol_interaction_Modify_;\n"],"sourceRoot":""}